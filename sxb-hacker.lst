  Mon Nov  2 2015 22:33                                                                                                    Page 1


                                               ***************************************
                                               **      WDC 65C816 Macro Assembler   **
                                               **                                   **
                                               **     Version 3.49.1- Feb  6 2006    **
                                               ***************************************

     1                        ;==============================================================================
     2                        ;  ______  ______        _   _            _
     3                        ; / ___\ \/ / __ )      | | | | __ _  ___| | _____ _ __
     4                        ; \___ \\  /|  _ \ _____| |_| |/ _` |/ __| |/ / _ \ '__|
     5                        ;  ___) /  \| |_) |_____|  _  | (_| | (__|   <  __/ |
     6                        ; |____/_/\_\____/      |_| |_|\__,_|\___|_|\_\___|_|
     7                        ;
     8                        ; A program for Hacking your W65C816SXB
     9                        ;------------------------------------------------------------------------------
    10                        ; Copyright (C)2015 Andrew Jacobs
    11                        ; All rights reserved.
    12                        ;
    13                        ; This work is made available under the terms of the Creative Commons
    14                        ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
    15                        ; following URL to see the details.
    16                        ;
    17                        ; http://creativecommons.org/licenses/by-nc-sa/4.0/
    18                        ;
    19                        ;==============================================================================
    20                        ; Notes:
    21                        ;
    22                        ; This program provides a simple monitor that you can use to inspect the memory
    23                        ; in your W65C816SXB and reprogram parts of the flash ROM.
    24                        ;
    25                        ;------------------------------------------------------------------------------
    26                        
    27                                        pw      132
    28                                        inclist on
    29                        
    30                                        chip    65816
    31                                        longi   off
    32                                        longa   off
    33                        
    34                                        include "w65c816.inc"
     1                        ;==============================================================================
     2                        ; __        ____  ____   ____ ___  _  __   
     3                        ; \ \      / / /_| ___| / ___( _ )/ |/ /_  
     4                        ;  \ \ /\ / / '_ \___ \| |   / _ \| | '_ \ 
     5                        ;   \ V  V /| (_) |__) | |__| (_) | | (_) |
     6                        ;    \_/\_/  \___/____/ \____\___/|_|\___/ 
     7                        ;
     8                        ; Western Design Center W65C816 device definitions                                          
     9                        ;------------------------------------------------------------------------------
    10                        
    11                        
    12                        ;==============================================================================
    13                        ; Status Register Bits
    14                        ;------------------------------------------------------------------------------
    15                        
    16             00000007   N_FLAG          equ     7
    17             00000006   V_FLAG          equ     6
    18             00000005   M_FLAG          equ     5
  Mon Nov  2 2015 22:33                                                                                                    Page 2


    19             00000004   X_FLAG          equ     4
    20             00000004   B_FLAG          equ     4
    21             00000003   D_FLAG          equ     3
    22             00000002   I_FLAG          equ     2
    23             00000001   Z_FLAG          equ     1
    24             00000000   C_FLAG          equ     0
    25                        
    26                        ;==============================================================================
    27                        ; Macros
    28                        ;------------------------------------------------------------------------------
    29                        
    30                        ; Puts the processor in emulation mode. A, X and Y become 8-bits and the stack
    31                        ; is fixed at $0100-$01ff. 
    32                        
    33                        emulate         macro
    34                                        sec
    35                                        xce
    36                                        endm
    37                        
    38                        ; Puts the processor in native mode. The size of the memory and index register
    39                        ; operations is not controlled by the M & X bits in the status register.
    40                        
    41                        native          macro
    42                                        clc
    43                                        xce
    44                                        endm
    45                        
    46                        ; Resets the M bit making the accumator and memory accesses 16-bits wide.
    47                         
    48                        long_a          macro
    49                                        rep     #(1<<M_FLAG)
    50                                        longa   on
    51                                        endm
    52                        
    53                        ; Resets the X bit making the index registers 16-bits wide
    54                        
    55                        long_i          macro
    56                                        rep     #(1<<X_FLAG)
    57                                        longi   on
    58                                        endm
    59                        
    60                        ; Resets the M and X bits making the accumator, memory accesses and index
    61                        ; registers 16-bits wide.
    62                                        
    63                        long_ai         macro
    64                                        rep     #(1<<M_FLAG)|(1<<X_FLAG)
    65                                        longa   on
    66                                        longi   on
    67                                        endm
    68                        
    69                        ; Sets the M bit making the accumator and memory accesses 16-bits wide.
    70                        
    71                        short_a         macro
    72                                        sep     #(1<<M_FLAG)
    73                                        longa   off
    74                                        endm
    75                        
    76                        short_i         macro
  Mon Nov  2 2015 22:33                                                                                                    Page 3


    77                                        sep     #(1<<X_FLAG)
    78                                        longi   off
    79                                        endm
    80                                        
    81                        short_ai        macro
    82                                        sep     #(1<<M_FLAG)|(1<<X_FLAG)
    83                                        longa   off
    84                                        longi   off
    85                                        endm
    35                                        include "w65c816sxb.inc"
     1                        ;==============================================================================
     2                        ; __        ____  ____   ____ ___  _  __  ______  ______
     3                        ; \ \      / / /_| ___| / ___( _ )/ |/ /_/ ___\ \/ / __ )
     4                        ;  \ \ /\ / / '_ \___ \| |   / _ \| | '_ \___ \\  /|  _ \
     5                        ;   \ V  V /| (_) |__) | |__| (_) | | (_) |__) /  \| |_) |
     6                        ;    \_/\_/  \___/____/ \____\___/|_|\___/____/_/\_\____/
     7                        ;
     8                        ; Western Design Center W65C816SXB Development Board Hardware Definitions
     9                        ;------------------------------------------------------------------------------
    10                        ; Copyright (C)2015 HandCoded Software Ltd.
    11                        ; All rights reserved.
    12                        ;
    13                        ; This work is made available under the terms of the Creative Commons
    14                        ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
    15                        ; following URL to see the details.
    16                        ;
    17                        ; http://creativecommons.org/licenses/by-nc-sa/4.0/
    18                        ;
    19                        ;==============================================================================
    20                        ; Notes:
    21                        ;
    22                        ; All of the current stock of W65C51 ACIAs have a silicon bug that causes the
    23                        ; 'Transmit Data Register Empty' (TDRE) bit in the status register to be stuck
    24                        ; high making it impossible to tell when the transmitter is ready for the next
    25                        ; data byte.
    26                        ;
    27                        ;------------------------------------------------------------------------------
    28                        
    29             007A1200   OSC_FREQ        equ     8000000                 ; SXB runs at 8MHz
    30                        
    31                        ;==============================================================================
    32                        ; W65C51 ACIA
    33                        ;------------------------------------------------------------------------------
    34                        
    35             00007F80   ACIA_RXD        equ     $7f80
    36             00007F80   ACIA_TXD        equ     $7f80
    37             00007F81   ACIA_SR         equ     $7f81
    38             00007F82   ACIA_CMD        equ     $7f82
    39             00007F83   ACIA_CTL        equ     $7f83
    40                        
    41                        ;==============================================================================
    42                        ; W65C21 PIA
    43                        ;------------------------------------------------------------------------------
    44                        
    45             00007FA0   PIA_PIA         equ     $7fa0
    46             00007FA0   PIA_DDRA        equ     $7fa0
    47             00007FA1   PIA_CRA         equ     $7fa1
    48             00007FA2   PIA_PIB         equ     $7fa2
  Mon Nov  2 2015 22:33                                                                                                    Page 4


    49             00007FA2   PIA_DDRB        equ     $7fa2
    50             00007FA3   PIA_CRB         equ     $7fa3
    51                        
    52                        ;==============================================================================
    53                        ; W65C22 VIA
    54                        ;------------------------------------------------------------------------------
    55                        
    56             00007FC0   VIA1_ORB        equ     $7fc0
    57             00007FC0   VIA1_IRB        equ     $7fc0
    58             00007FC1   VIA1_ORA        equ     $7fc1
    59             00007FC1   VIA1_IRA        equ     $7fc1
    60             00007FC2   VIA1_DDRB       equ     $7fc2
    61             00007FC3   VIA1_DDRA       equ     $7fc3
    62             00007FC4   VIA1_T1CL       equ     $7fc4
    63             00007FC5   VIA1_T1CH       equ     $7fc5
    64             00007FC6   VIA1_T1LL       equ     $7fc6
    65             00007FC7   VIA1_T1LH       equ     $7fc7
    66             00007FC8   VIA1_T2CL       equ     $7fc8
    67             00007FC9   VIA1_T2CH       equ     $7fc9
    68             00007FCA   VIA1_SR         equ     $7fca
    69             00007FCB   VIA1_ACR        equ     $7fcb
    70             00007FCC   VIA1_PCR        equ     $7fcc
    71             00007FCD   VIA1_IFR        equ     $7fcd
    72             00007FCE   VIA1_IER        equ     $7fce
    73             00007FCF   VIA1_ORAN       equ     $7fcf
    74             00007FCF   VIA1_IRAN       equ     $7fcf
    75                        
    76                        ;------------------------------------------------------------------------------
    77                        
    78             00007FE0   VIA2_ORB        equ     $7fe0
    79             00007FE0   VIA2_IRB        equ     $7fe0
    80             00007FE1   VIA2_ORA        equ     $7fe1
    81             00007FE1   VIA2_IRA        equ     $7fe1
    82             00007FE2   VIA2_DDRB       equ     $7fe2
    83             00007FE3   VIA2_DDRA       equ     $7fe3
    84             00007FE4   VIA2_T1CL       equ     $7fe4
    85             00007FE5   VIA2_T1CH       equ     $7fe5
    86             00007FE6   VIA2_T1LL       equ     $7fe6
    87             00007FE7   VIA2_T1LH       equ     $7fe7
    88             00007FE8   VIA2_T2CL       equ     $7fe8
    89             00007FE9   VIA2_T2CH       equ     $7fe9
    90             00007FEA   VIA2_SR         equ     $7fea
    91             00007FEB   VIA2_ACR        equ     $7feb
    92             00007FEC   VIA2_PCR        equ     $7fec
    93             00007FED   VIA2_IFR        equ     $7fed
    94             00007FEE   VIA2_IER        equ     $7fee
    95             00007FEF   VIA2_ORAN       equ     $7fef
    96             00007FEF   VIA2_IRAN       equ     $7fef
    36                        
    37                        ;==============================================================================
    38                        ; ASCII Character Codes
    39                        ;------------------------------------------------------------------------------
    40                        
    41             00000001   SOH             equ     $01
    42             00000004   EOT             equ     $04
    43             00000006   ACK             equ     $06
    44             00000007   BEL             equ     $07
    45             00000008   BS              equ     $08
  Mon Nov  2 2015 22:33                                                                                                    Page 5


    46             0000000A   LF              equ     $0a
    47             0000000D   CR              equ     $0d
    48             00000015   NAK             equ     $15
    49             00000018   CAN             equ     $18
    50             0000001B   ESC             equ     $1b
    51             0000007F   DEL             equ     $7f
    52                        
    53                        ;==============================================================================
    54                        ; Data Areas
    55                        ;------------------------------------------------------------------------------
    56                        
    57                                        page0
    58                        
    59 00:0000:              BUFLEN          ds      1
    60 00:0001:              BANK            ds      1
    61                        
    62 00:0002:              ADDR_S          ds      3
    63 00:0005:              ADDR_E          ds      3
    64                        
    65 00:0008:              BLOCK           ds      1                       ; XMODEM block number
    66 00:0009:              RETRIES         ds      1                       ; Retry count
    67 00:000A:              SUM             ds      1
    68                        
    69 00:000B:              TEMP            ds      4
    70                        
    71                                        data
    72                                        org     $200
    73                        
    74 00:0200:              BUFFER          ds      128
    75                        
    76                        ;==============================================================================
    77                        ; Initialisation
    78                        ;------------------------------------------------------------------------------
    79                        
    80                                        code
    81                                        public  Start
    82                                        extern  UartRx
    83                                        extern  UartTx
    84                                        extern  UartRxTest
    85                        Start:
    86                                        short_a                         ; Configure register sizes
+   86 00:0000: E2 20                        sep     #(1<<M_FLAG)
+   86                                        longa   off
    87                                        long_i
+   87 00:0002: C2 10                        rep     #(1<<X_FLAG)
+   87                                        longi   on
    88 00:0004: 20 xx xx                     jsr     UartCRLF
    89 00:0007: A2 xx xx                     ldx     #TITLE                  ; Display application title
    90 00:000A: 20 xx xx                     jsr     UartStr
    91                        
    92 00:000D: 64 xx                        stz     BANK                    ; Reset default bank
    93                        
    94                        ;==============================================================================
    95                        ; Command Processor
    96                        ;------------------------------------------------------------------------------
    97                        
    98                        NewCommand:
    99 00:000F: 64 xx                        stz     BUFLEN                  ; Clear the buffer
  Mon Nov  2 2015 22:33                                                                                                    Page 6


   100 00:0011: 20 xx xx                     jsr     UartCRLF                ; Move to a new line
   101                        
   102 00:0014: A9 2E                        lda     #'.'                    ; Output the prompt
   103 00:0016: 20 xx xx                     jsr     UartTx
   104                        
   105                                        short_i
+  105 00:0019: E2 10                        sep     #(1<<X_FLAG)
+  105                                        longi   off
   106 00:001B: A2 00                        ldx     #0
   107 00:001D: E4 xx        DisplayCmd:     cpx     BUFLEN                  ; Any saved characters
   108 00:001F: F0 0E                        beq     ReadCommand
   109 00:0021: BD 00 02                     lda     BUFFER,x                ; Yes, display them
   110 00:0024: 20 xx xx                     jsr     UartTx
   111 00:0027: E8                           inx
   112 00:0028: 80 F3                        bra     DisplayCmd
   113                        
   114                        RingBell:
   115 00:002A: A9 07                        lda     #BEL                    ; Make a beep
   116 00:002C: 20 xx xx                     jsr     UartTx
   117                        
   118                        ReadCommand:
   119 00:002F: 20 xx xx                     jsr     UartRx                  ; Wait for character
   120                        
   121 00:0032: C9 1B                        cmp     #ESC                    ; Cancel input?
   122 00:0034: F0 D9                        beq     NewCommand              ; Yes, clear and restart
   123 00:0036: C9 0D                        cmp     #CR                     ; End of command?
   124 00:0038: F0 2F                        beq     ProcessCommand          ; Yes, start processing
   125                        
   126 00:003A: C9 08                        cmp     #BS                     ; Back space?
   127 00:003C: F0 15                        beq     BackSpace
   128 00:003E: C9 7F                        cmp     #DEL                    ; Delete?
   129 00:0040: F0 11                        beq     BackSpace
   130                        
   131 00:0042: C9 20                        cmp     #' '                    ; Printable character
   132 00:0044: 90 E4                        bcc     RingBell                ; No.
   133 00:0046: C9 7F                        cmp     #DEL
   134 00:0048: B0 E0                        bcs     RingBell                ; No.
   135 00:004A: 9D 00 02                     sta     BUFFER,x                ; Save rhe character
   136 00:004D: E8                           inx
   137 00:004E: 20 xx xx                     jsr     UartTx                  ; Echo it and repeat
   138 00:0051: 80 DC                        bra     ReadCommand
   139                        
   140                        BackSpace:
   141 00:0053: E0 00                        cpx     #0                      ; Buffer empty?
   142 00:0055: F0 D3                        beq     RingBell                ; Yes, beep and continue
   143 00:0057: CA                           dex                             ; No, remove last character
   144 00:0058: A9 08                        lda     #BS
   145 00:005A: 20 xx xx                     jsr     UartTx
   146 00:005D: A9 20                        lda     #' '
   147 00:005F: 20 xx xx                     jsr     UartTx
   148 00:0062: A9 08                        lda     #BS
   149 00:0064: 20 xx xx                     jsr     UartTx
   150 00:0067: 80 C6                        bra     ReadCommand             ; And retry
   151                        
   152                        ProcessCommand:
   153 00:0069: 86 xx                        stx     BUFLEN                  ; Save final length
   154 00:006B: A0 00                        ldy     #0                      ; Load index for start
   155                        
  Mon Nov  2 2015 22:33                                                                                                    Page 7


   156 00:006D: 20 xx xx                     jsr     SkipSpaces              ; Fetch command character
   157 00:0070: B0 9D                        bcs     NewCommand              ; None, empty command
   158                        
   159                        ;==============================================================================
   160                        ; B - Select Memory Bank
   161                        ;------------------------------------------------------------------------------
   162                        
   163 00:0072: C9 42                        cmp     #'B'                    ; Select memory bank?
   164 00:0074: D0 0D                        bne     NotMemoryBank
   165                        
   166 00:0076: A2 xx                        ldx     #BANK                   ; Parse bank
   167 00:0078: 20 xx xx                     jsr     GetByte
   168 00:007B: 90 03                        bcc     $+5
   169 00:007D: 4C xx xx                     jmp     ShowError
   170 00:0080: 4C xx xx                     jmp     NewCommand
   171                        NotMemoryBank:
   172                        
   173                        ;==============================================================================
   174                        ; M - Display Memory
   175                        ;------------------------------------------------------------------------------
   176                        
   177 00:0083: C9 4D                        cmp     #'M'                    ; Memory display?
   178 00:0085: D0 74                        bne     NotMemoryDisplay
   179                        
   180 00:0087: A2 xx                        ldx     #ADDR_S                 ; Parse start address
   181 00:0089: 20 xx xx                     jsr     GetAddr
   182 00:008C: 90 03                        bcc     $+5
   183 00:008E: 4C xx xx                     jmp     ShowError
   184 00:0091: A2 xx                        ldx     #ADDR_E                 ; Parse end address
   185 00:0093: 20 xx xx                     jsr     GetAddr
   186 00:0096: 90 03                        bcc     $+5
   187 00:0098: 4C xx xx                     jmp     ShowError
   188                        
   189                        DisplayMemory:
   190 00:009B: 20 xx xx                     jsr     UartCRLF
   191 00:009E: A5 xx                        lda     ADDR_S+2                ; Show memory address
   192 00:00A0: 20 xx xx                     jsr     UartHex2
   193 00:00A3: A9 3A                        lda     #':'
   194 00:00A5: 20 xx xx                     jsr     UartTx
   195 00:00A8: A5 xx                        lda     ADDR_S+1
   196 00:00AA: 20 xx xx                     jsr     UartHex2
   197 00:00AD: A5 xx                        lda     ADDR_S+0
   198 00:00AF: 20 xx xx                     jsr     UartHex2
   199                        
   200 00:00B2: A0 00                        ldy     #0                      ; Show sixteen bytes of data
   201 00:00B4: A9 20        ByteLoop:       lda     #' '
   202 00:00B6: 20 xx xx                     jsr     UartTx
   203 00:00B9: B7 xx                        lda     [ADDR_S],y
   204 00:00BB: 20 xx xx                     jsr     UartHex2
   205 00:00BE: C8                           iny
   206 00:00BF: C0 10                        cpy     #16
   207 00:00C1: D0 F1                        bne     ByteLoop
   208                        
   209 00:00C3: A9 20                        lda     #' '
   210 00:00C5: 20 xx xx                     jsr     UartTx
   211 00:00C8: A9 7C                        lda     #'|'
   212 00:00CA: 20 xx xx                     jsr     UartTx
   213 00:00CD: A0 00                        ldy     #0                      ; Show sixteen characters
  Mon Nov  2 2015 22:33                                                                                                    Page 8


   214 00:00CF: B7 xx        CharLoop:       lda     [ADDR_S],Y
   215 00:00D1: 20 xx xx                     jsr     IsPrintable
   216 00:00D4: B0 02                        bcs     $+4
   217 00:00D6: A9 2E                        lda     #'.'
   218 00:00D8: 20 xx xx                     jsr     UartTx
   219 00:00DB: C8                           iny
   220 00:00DC: C0 10                        cpy     #16
   221 00:00DE: D0 EF                        bne     CharLoop
   222 00:00E0: A9 7C                        lda     #'|'
   223 00:00E2: 20 xx xx                     jsr     UartTx
   224                        
   225 00:00E5: 18                           clc                             ; Bump the display address
   226 00:00E6: 98                           tya
   227 00:00E7: 65 xx                        adc     ADDR_S+0
   228 00:00E9: 85 xx                        sta     ADDR_S+0
   229 00:00EB: 90 02                        bcc     $+4
   230 00:00ED: E6 xx                        inc     ADDR_S+1
   231                        
   232 00:00EF: 38                           sec                             ; Exceeded the end address?
   233 00:00F0: E5 xx                        sbc     ADDR_E+0
   234 00:00F2: A5 xx                        lda     ADDR_S+1
   235 00:00F4: E5 xx                        sbc     ADDR_E+1
   236 00:00F6: 30 A3                        bmi     DisplayMemory           ; No, show more
   237                        
   238 00:00F8: 4C xx xx                     jmp     NewCommand
   239                        NotMemoryDisplay:
   240                        
   241                        ;==============================================================================
   242                        ; R - Select ROM Bank
   243                        ;------------------------------------------------------------------------------
   244                        
   245 00:00FB: C9 52                        cmp     #'R'                    ; ROM Bank?
   246 00:00FD: D0 26                        bne     NotROMBank              ; No
   247                        
   248 00:00FF: 20 xx xx                     jsr     SkipSpaces              ; Find first argument
   249 00:0102: 90 03                        bcc     $+5                     ; Success?
   250 00:0104: 4C xx xx     BankFail:       jmp     ShowError               ; No
   251                        
   252 00:0107: C9 30                        cmp     #'0'                    ; Check bank is 0..3
   253 00:0109: 90 F9                        bcc     BankFail
   254 00:010B: C9 34                        cmp     #'3'+1
   255 00:010D: B0 F5                        bcs     BankFail
   256                        
   257 00:010F: 85 xx                        sta     TEMP                    ; Work out VIA settings
   258 00:0111: A9 00                        lda     #0
   259 00:0113: 66 xx                        ror     TEMP                    ; Bit 0 set
   260 00:0115: B0 02                        bcs     $+4
   261 00:0117: 09 0C                        ora     #%00001100              ; No, make CA2 (A15) low
   262 00:0119: 66 xx                        ror     TEMP                    ; Bit 1 set
   263 00:011B: B0 02                        bcs     $+4
   264 00:011D: 09 C0                        ora     #%11000000              ; No, make CB2 (FAMS) low
   265 00:011F: 8D EC 7F                     sta     VIA2_PCR                ; Set ROM select lines
   266                        
   267 00:0122: 4C xx xx                     jmp     NewCommand              ; Done
   268                        NotROMBank:
   269                        
   270                        ;==============================================================================
   271                        ; U - Unlock Memory
  Mon Nov  2 2015 22:33                                                                                                    Page 9


   272                        ;------------------------------------------------------------------------------
   273                        
   274 00:0125: C9 55                        cmp     #'U'                    ; Unlock memory?
   275 00:0127: D0 1E                        bne     NotUnlock
   276                        
   277                                        short_a
+  277 00:0129: E2 20                        sep     #(1<<M_FLAG)
+  277                                        longa   off
   278 00:012B: A9 55                        lda     #$55                    ; Execute the unlock sequence
   279 00:012D: 8D 55 D5                     sta     $8000+$5555
   280 00:0130: A9 AA                        lda     #$aa
   281 00:0132: 8D AA AA                     sta     $8000+$2aaa
   282 00:0135: A9 A0                        lda     #$a0
   283 00:0137: 8D 55 D5                     sta     $8000+$5555
   284                        
   285                                        long_i
+  285 00:013A: C2 10                        rep     #(1<<X_FLAG)
+  285                                        longi   on
   286 00:013C: A2 xx xx                     ldx     #UNLOCKED               ; And announce it
   287 00:013F: 20 xx xx                     jsr     UartStr
   288                                        short_i
+  288 00:0142: E2 10                        sep     #(1<<X_FLAG)
+  288                                        longi   off
   289 00:0144: 4C xx xx                     jmp     NewCommand              ; Done
   290                        NotUnlock:
   291                        
   292                        ;==============================================================================
   293                        ; X - XMODEM Upload
   294                        ;------------------------------------------------------------------------------
   295                        
   296 00:0147: C9 58                        cmp     #'X'                    ; XModem upload?
   297 00:0149: F0 03                        beq     $+5                     ; Yes.
   298 00:014B: 4C xx xx                     jmp     NotXModem
   299                        
   300 00:014E: A2 xx                        ldx     #ADDR_S                 ; Parse start address
   301 00:0150: 20 xx xx                     jsr     GetAddr
   302 00:0153: 90 03                        bcc     $+5
   303 00:0155: 4C xx xx                     jmp     ShowError
   304                        
   305 00:0158: 24 xx                        bit     ADDR_S+1                ; Load into ROM area?
   306 00:015A: 10 12                        bpl     NotROMArea
   307 00:015C: AD EC 7F                     lda     VIA2_PCR                ; Yes, check ROM selected
   308 00:015F: 29 CC                        and     #%11001100
   309 00:0161: D0 0B                        bne     NotROMArea
   310                                        long_i                          ; Upload to ROM3 ROM Area
+  310 00:0163: C2 10                        rep     #(1<<X_FLAG)
+  310                                        longi   on
   311 00:0165: A2 xx xx                     ldx     #NOT_SAFE
   312 00:0168: 20 xx xx                     jsr     UartStr
   313 00:016B: 4C xx xx                     jmp     NewCommand
   314                        
   315                        NotROMArea:
   316                                        long_i                          ; Display waiting message
+  316 00:016E: C2 10                        rep     #(1<<X_FLAG)
+  316                                        longi   on
   317 00:0170: A2 xx xx                     ldx     #WAITING
   318 00:0173: 20 xx xx                     jsr     UartStr
   319 00:0176: 20 xx xx                     jsr     UartCRLF
  Mon Nov  2 2015 22:33                                                                                                    Page 10


   320                                        short_i
+  320 00:0179: E2 10                        sep     #(1<<X_FLAG)
+  320                                        longi   off
   321 00:017B: 64 xx                        stz     BLOCK                   ; Reset the block number
   322 00:017D: E6 xx                        inc     BLOCK
   323                        
   324                        ResetRetries:
   325 00:017F: A9 0A                        lda     #10                     ; Reset the retry counter
   326 00:0181: 85 xx                        sta     RETRIES
   327                        
   328                        TransferWait:
   329 00:0183: 64 xx                        stz     TEMP+0                  ; Clear timeout counter
   330 00:0185: 64 xx                        stz     TEMP+1
   331 00:0187: A9 EC                        lda     #-20
   332 00:0189: 85 xx                        sta     TEMP+2
   333                        TransferPoll:
   334 00:018B: 20 xx xx                     jsr     UartRxTest              ; Any data yet?
   335 00:018E: B0 22                        bcs     TransferScan
   336 00:0190: E6 xx                        inc     TEMP+0
   337 00:0192: D0 F7                        bne     TransferPoll
   338 00:0194: E6 xx                        inc     TEMP+1
   339 00:0196: D0 F3                        bne     TransferPoll
   340 00:0198: E6 xx                        inc     TEMP+2
   341 00:019A: D0 EF                        bne     TransferPoll
   342 00:019C: C6 xx                        dec     RETRIES
   343 00:019E: F0 05                        beq     TimedOut
   344 00:01A0: 20 xx xx                     jsr     SendNAK                 ; Send a NAK
   345 00:01A3: 80 DE                        bra     TransferWait
   346                        
   347                        TimedOut:
   348                                        long_i
+  348 00:01A5: C2 10                        rep     #(1<<X_FLAG)
+  348                                        longi   on
   349 00:01A7: A2 xx xx                     ldx     #TIMEOUT
   350 00:01AA: 20 xx xx                     jsr     UartStr
   351                                        short_i
+  351 00:01AD: E2 10                        sep     #(1<<X_FLAG)
+  351                                        longi   off
   352 00:01AF: 4C xx xx                     jmp     NewCommand
   353                        
   354                        
   355                        TransferScan:
   356 00:01B2: 20 xx xx                     jsr     UartRx                  ; Wait for SOH or EOT
   357 00:01B5: 85 40                sta <$40
   358 00:01B7: C9 04                        cmp     #EOT
   359 00:01B9: F0 49                        beq     TransferDone
   360 00:01BB: C9 01                        cmp     #SOH
   361 00:01BD: D0 C4                        bne     TransferWait
   362 00:01BF: 20 xx xx                     jsr     UartRx                  ; Check the block number
   363 00:01C2: 85 41                sta <$41
   364 00:01C4: C5 xx                        cmp     BLOCK
   365 00:01C6: D0 36                        bne     TransferError
   366 00:01C8: 20 xx xx                     jsr     UartRx                  ; Check inverted block
   367 00:01CB: 85 42                sta <$42
   368 00:01CD: 49 FF                        eor     #$ff
   369 00:01CF: C5 xx                        cmp     BLOCK
   370 00:01D1: D0 2B                        bne     TransferError
   371                        
  Mon Nov  2 2015 22:33                                                                                                    Page 11


   372 00:01D3: A0 00                        ldy     #0
   373 00:01D5: 84 xx                        sty     SUM                     ; Clear the check sum
   374 00:01D7: 20 xx xx     TransferBlock:  jsr     UartRx
   375 00:01DA: 97 xx                        sta     [ADDR_S],Y
   376 00:01DC: 18                           clc                             ; Add to check sum
   377 00:01DD: 65 xx                        adc     SUM
   378 00:01DF: 85 xx                        sta     SUM
   379 00:01E1: C8                           iny
   380 00:01E2: C0 80                        cpy     #128
   381 00:01E4: D0 F1                        bne     TransferBlock
   382 00:01E6: 20 xx xx                     jsr     UartRx                  ; Check the check sum
   383 00:01E9: C5 xx                        cmp     SUM
   384 00:01EB: D0 11                        bne     TransferError           ; Failed
   385 00:01ED: 18                           clc
   386 00:01EE: 98                           tya
   387 00:01EF: 65 xx                        adc     ADDR_S+0                ; Bump address one block
   388 00:01F1: 85 xx                        sta     ADDR_S+0
   389 00:01F3: 90 02                        bcc     $+4
   390 00:01F5: E6 xx                        inc     ADDR_S+1
   391                        
   392 00:01F7: 20 xx xx                     jsr     SendACK                 ; Acknowledge block
   393 00:01FA: E6 xx                        inc     BLOCK                   ; Bump block number
   394 00:01FC: 80 85                        bra     TransferWait
   395                        
   396                        TransferError;
   397 00:01FE: 20 xx xx                     jsr     SendNAK                 ; Send a NAK
   398 00:0201: 4C xx xx                     jmp     TransferWait            ; And try again
   399                        
   400                        TransferDone:
   401 00:0204: 20 xx xx                     jsr     SendACK                 ; Acknowledge transmission
   402 00:0207: 4C xx xx                     jmp     NewCommand              ; Done
   403                        
   404                        SendACK:
   405 00:020A: A9 06                        lda     #ACK
   406 00:020C: 4C xx xx                     jmp     UartTx
   407                        
   408                        SendNAK:
   409 00:020F: A9 15                        lda     #NAK
   410 00:0211: 4C xx xx                     jmp     UartTx
   411                        
   412                        NotXModem:
   413                        
   414                        ;==============================================================================
   415                        ; ? - Help
   416                        ;------------------------------------------------------------------------------
   417                        
   418 00:0214: C9 3F                        cmp     #'?'                    ; Help command?
   419 00:0216: D0 0B                        bne     NotHelp
   420                        
   421                                        long_i
+  421 00:0218: C2 10                        rep     #(1<<X_FLAG)
+  421                                        longi   on
   422 00:021A: A2 xx xx                     ldx     #HELP                   ; Output help string
   423 00:021D: 20 xx xx                     jsr     UartStr
   424 00:0220: 4C xx xx                     jmp     NewCommand
   425                        NotHelp:
   426                        
   427                        ShowError:
  Mon Nov  2 2015 22:33                                                                                                    Page 12


   428                                        long_i
+  428 00:0223: C2 10                        rep     #(1<<X_FLAG)
+  428                                        longi   on
   429 00:0225: A2 xx xx                     ldx     #ERROR                  ; Output error message
   430 00:0228: 20 xx xx                     jsr     UartStr
   431 00:022B: 4C xx xx                     jmp     NewCommand
   432                        
   433                        ;==============================================================================
   434                        ;------------------------------------------------------------------------------
   435                        
   436                        GetByte:
   437 00:022E: 9E 00 00                     stz     0,x                     ; Set the target address
   438 00:0231: 20 xx xx                     jsr     SkipSpaces              ; Skip to first real characater
   439 00:0234: 90 01                        bcc     $+3
   440 00:0236: 60                           rts                             ; None found
   441 00:0237: 20 xx xx                     jsr     IsHexDigit              ; Must have atleast one digit
   442 00:023A: 90 12                        bcc     ByteFail
   443 00:023C: 20 xx xx                     jsr     AddDigit
   444 00:023F: 20 xx xx                     jsr     NextChar
   445 00:0242: B0 08                        bcs     ByteDone
   446 00:0244: 20 xx xx                     jsr     IsHexDigit
   447 00:0247: 90 03                        bcc     ByteDone
   448 00:0249: 20 xx xx                     jsr     AddDigit
   449 00:024C: 18           ByteDone:       clc
   450 00:024D: 60                           rts
   451 00:024E: 38           ByteFail:       sec
   452 00:024F: 60                           rts
   453                        
   454                        GetAddr:
   455 00:0250: 9E 00 00                     stz     0,x                     ; Set the target address
   456 00:0253: 9E 01 00                     stz     1,x
   457 00:0256: A5 xx                        lda     BANK
   458 00:0258: 9D 02 00                     sta     2,x
   459 00:025B: 20 xx xx                     jsr     SkipSpaces              ; Skip to first real characater
   460 00:025E: 90 01                        bcc     $+3
   461 00:0260: 60                           rts                             ; None found
   462                        
   463 00:0261: 20 xx xx                     jsr     IsHexDigit              ; Must have atleast one digit
   464 00:0264: 90 2C                        bcc     AddrFail
   465 00:0266: 20 xx xx                     jsr     AddDigit
   466 00:0269: 20 xx xx                     jsr     NextChar
   467 00:026C: B0 22                        bcs     AddrDone
   468 00:026E: 20 xx xx                     jsr     IsHexDigit
   469 00:0271: 90 1D                        bcc     AddrDone
   470 00:0273: 20 xx xx                     jsr     AddDigit
   471 00:0276: 20 xx xx                     jsr     NextChar
   472 00:0279: B0 15                        bcs     AddrDone
   473 00:027B: 20 xx xx                     jsr     IsHexDigit
   474 00:027E: 90 10                        bcc     AddrDone
   475 00:0280: 20 xx xx                     jsr     AddDigit
   476 00:0283: 20 xx xx                     jsr     NextChar
   477 00:0286: B0 08                        bcs     AddrDone
   478 00:0288: 20 xx xx                     jsr     IsHexDigit
   479 00:028B: 90 03                        bcc     AddrDone
   480 00:028D: 20 xx xx                     jsr     AddDigit
   481 00:0290: 18           AddrDone:       clc                             ; Carry clear got an address
   482 00:0291: 60                           rts
   483 00:0292: 38           AddrFail:       sec                             ; Carry set -- failed.
  Mon Nov  2 2015 22:33                                                                                                    Page 13


   484 00:0293: 60                           rts
   485                        
   486                        AddDigit:
   487 00:0294: 38                           sec                             ; Convert ASCII to binary
   488 00:0295: E9 30                        sbc     #'0'
   489 00:0297: C9 0A                        cmp     #$0a
   490 00:0299: 90 02                        bcc     $+4
   491 00:029B: E9 07                        sbc     #7
   492                        
   493 00:029D: 1E 00 00                     asl     0,x                     ; Shift up one nybble
   494 00:02A0: 3E 01 00                     rol     1,x
   495 00:02A3: 1E 00 00                     asl     0,x
   496 00:02A6: 3E 01 00                     rol     1,x
   497 00:02A9: 1E 00 00                     asl     0,x
   498 00:02AC: 3E 01 00                     rol     1,x
   499 00:02AF: 1E 00 00                     asl     0,x
   500 00:02B2: 3E 01 00                     rol     1,x
   501                        
   502 00:02B5: 1D 00 00                     ora     0,x                     ; Merge in new digit
   503 00:02B8: 9D 00 00                     sta     0,x                     ; Then get next digit
   504 00:02BB: 60                           rts
   505                        
   506                        ; Get the next character from the command buffer updating the position in X.
   507                        ; Set the carry if the end of the buffer is reached.
   508                        
   509                        NextChar:
   510 00:02BC: C4 xx                        cpy     BUFLEN                  ; Any characters left?
   511 00:02BE: 90 01                        bcc     $+3
   512 00:02C0: 60                           rts
   513 00:02C1: B9 00 02                     lda     BUFFER,y
   514 00:02C4: C8                           iny
   515 00:02C5: 4C xx xx                     jmp     ToUpperCase
   516                        
   517                        SkipSpaces:
   518 00:02C8: 20 xx xx                     jsr     NextChar                ; Fetch next character
   519 00:02CB: 90 01                        bcc     $+3                     ; Any left?
   520 00:02CD: 60                           rts                             ; No
   521 00:02CE: C9 20                        cmp     #' '                    ; Is it a space?
   522 00:02D0: F0 F6                        beq     SkipSpaces              ; Yes, try again
   523 00:02D2: 18                           clc
   524 00:02D3: 60                           rts                             ; Done
   525                        
   526                        ; If the character in A is lower case then convert it to upper case.
   527                        
   528                        ToUpperCase:
   529 00:02D4: 20 xx xx                     jsr     IsLowerCase             ; Test the character
   530 00:02D7: 90 02                        bcc     $+4
   531 00:02D9: E9 20                        sbc     #32                     ; Convert lower case
   532 00:02DB: 18                           clc
   533 00:02DC: 60                           rts                             ; Done
   534                        
   535                        ; Determine if the character in A is a lower case letter. Set the carry if it
   536                        ; is, otherwise clear it.
   537                        
   538                        IsLowerCase:
   539 00:02DD: C9 61                        cmp     #'a'                    ; Between a and z?
   540 00:02DF: 90 06                        bcc     ClearCarry
   541 00:02E1: C9 7B                        cmp     #'z'+1
  Mon Nov  2 2015 22:33                                                                                                    Page 14


   542 00:02E3: B0 02                        bcs     ClearCarry
   543 00:02E5: 38           SetCarry:       sec
   544 00:02E6: 60                           rts
   545 00:02E7: 18           ClearCarry:     clc
   546 00:02E8: 60                           rts
   547                        
   548                        ; Determine if the character in A is a hex character. Set the carry if it is,
   549                        ; otherwise clear it.
   550                        
   551                        IsHexDigit:
   552 00:02E9: C9 30                        cmp     #'0'                    ; Between 0 and 9?
   553 00:02EB: 90 FA                        bcc     ClearCarry
   554 00:02ED: C9 3A                        cmp     #'9'+1
   555 00:02EF: 90 F4                        bcc     SetCarry
   556 00:02F1: C9 41                        cmp     #'A'                    ; Between A and F?
   557 00:02F3: 90 F2                        bcc     ClearCarry
   558 00:02F5: C9 47                        cmp     #'F'+1
   559 00:02F7: 90 EC                        bcc     SetCarry
   560 00:02F9: 80 EC                        bra     ClearCarry
   561                        
   562                        ; Determine if the character in A is a printable character. Set the carry if it
   563                        ; is, otherwise clear it.
   564                        
   565                        IsPrintable:
   566 00:02FB: C9 20                        cmp     #' '
   567 00:02FD: 90 E8                        bcc     ClearCarry
   568 00:02FF: C9 7F                        cmp     #DEL
   569 00:0301: 90 E2                        bcc     SetCarry
   570 00:0303: 80 E2                        bra     ClearCarry
   571                        
   572                        ;==============================================================================
   573                        ; Display Utilities
   574                        ;------------------------------------------------------------------------------
   575                        
   576                        ; Display the value in A as two hexadecimal digits.
   577                        
   578                        UartHex2:
   579 00:0305: 48                           pha                             ; Save the original byte
   580 00:0306: 4A                           lsr     a                       ; Shift down hi nybble
   581 00:0307: 4A                           lsr     a
   582 00:0308: 4A                           lsr     a
   583 00:0309: 4A                           lsr     a
   584 00:030A: 20 xx xx                     jsr     UartHex                 ; Display
   585 00:030D: 68                           pla                             ; Recover data byte
   586                        
   587                        ; Display the LSB of the value in A as a hexadecimal digit using decimal
   588                        ; arithmetic to do the conversion.
   589                        
   590                        UartHex:
   591 00:030E: 29 0F                        and     #$0f                    ; Strip out lo nybble
   592 00:0310: F8                           sed                             ; Convert to ASCII
   593 00:0311: 18                           clc
   594 00:0312: 69 90                        adc     #$90
   595 00:0314: 69 40                        adc     #$40
   596 00:0316: D8                           cld
   597 00:0317: 4C xx xx                     jmp     UartTx                  ; And display
   598                        
   599                        ; Display the string of characters starting a the memory location pointed to by
  Mon Nov  2 2015 22:33                                                                                                    Page 15


   600                        ; X (16-bits).
   601                        
   602                        UartStr:
   603 00:031A: BD 00 00                     lda     0,x                     ; Fetch the next character
   604 00:031D: D0 01                        bne     $+3                     ; Return it end of string
   605 00:031F: 60                           rts
   606 00:0320: 20 xx xx                     jsr     UartTx                  ; Otherwise print it
   607 00:0323: E8                           inx                             ; Bump the pointer
   608 00:0324: 80 F4                        bra     UartStr                 ; And repeat
   609                        
   610                        ; Display a CR/LF control character sequence.
   611                        
   612                        UartCRLF:
   613 00:0326: 20 xx xx                     jsr     UartCR                  ; Transmit a CR
   614 00:0329: A9 0A                        lda     #LF                     ; Followed by a LF
   615 00:032B: 4C xx xx                     jmp     UartTx
   616                        
   617 00:032E: A9 0D        UartCR:         lda     #CR                     ; Transmit a CR
   618 00:0330: 4C xx xx                     jmp     UartTx
   619                        
   620                        ;==============================================================================
   621                        ; String Literals
   622                        ;------------------------------------------------------------------------------
   623                        
   624 00:0333: 0D 0A 57 36  TITLE           db      CR,LF,"W65C816SXB-Hacker [15.08]",0
       00:0337: 35 43 38 31 
       00:033B: 36 53 58 42 
       00:033F: 2D 48 61 63 
       00:0343: 6B 65 72 20 
       00:0347: 5B 31 35 2E 
       00:034B: 30 38 5D 00 
   625                        
   626 00:034F: 0D 0A 45 72  ERROR           db      CR,LF,"Error - Type ? for help",0
       00:0353: 72 6F 72 20 
       00:0357: 2D 20 54 79 
       00:035B: 70 65 20 3F 
       00:035F: 20 66 6F 72 
       00:0363: 20 68 65 6C 
       00:0367: 70 00 
   627                        
   628 00:0369: 0D 0A 52 4F  UNLOCKED        db      CR,LF,"ROM area unlocked",0
       00:036D: 4D 20 61 72 
       00:0371: 65 61 20 75 
       00:0375: 6E 6C 6F 63 
       00:0379: 6B 65 64 00 
   629 00:037D: 0D 0A 57 44  NOT_SAFE        db      CR,LF,"WDC ROM Bank Selected",0
       00:0381: 43 20 52 4F 
       00:0385: 4D 20 42 61 
       00:0389: 6E 6B 20 53 
       00:038D: 65 6C 65 63 
       00:0391: 74 65 64 00 
   630                        
   631 00:0395: 0D 0A 57 61  WAITING         db      CR,LF,"Waiting for XMODEM transfer to start",0
       00:0399: 69 74 69 6E 
       00:039D: 67 20 66 6F 
       00:03A1: 72 20 58 4D 
       00:03A5: 4F 44 45 4D 
       00:03A9: 20 74 72 61 
  Mon Nov  2 2015 22:33                                                                                                    Page 16


       00:03AD: 6E 73 66 65 
       00:03B1: 72 20 74 6F 
       00:03B5: 20 73 74 61 
       00:03B9: 72 74 00 
   632 00:03BC: 0D 0A 54 69  TIMEOUT         db      CR,LF,"Timeout",0
       00:03C0: 6D 65 6F 75 
       00:03C4: 74 00 
   633                        
   634 00:03C6: 0D 0A 42 20  HELP            db      CR,LF,"B bb           - Set memory bank"
       00:03CA: 62 62 20 20 
       00:03CE: 20 20 20 20 
       00:03D2: 20 20 20 20 
       00:03D6: 20 2D 20 53 
       00:03DA: 65 74 20 6D 
       00:03DE: 65 6D 6F 72 
       00:03E2: 79 20 62 61 
       00:03E6: 6E 6B 
   635 00:03E8: 0D 0A 4D 20                  db      CR,LF,"M bbbb eeee    - Display memory in current bank"
       00:03EC: 62 62 62 62 
       00:03F0: 20 65 65 65 
       00:03F4: 65 20 20 20 
       00:03F8: 20 2D 20 44 
       00:03FC: 69 73 70 6C 
       00:0400: 61 79 20 6D 
       00:0404: 65 6D 6F 72 
       00:0408: 79 20 69 6E 
       00:040C: 20 63 75 72 
       00:0410: 72 65 6E 74 
       00:0414: 20 62 61 6E 
       00:0418: 6B 
   636 00:0419: 0D 0A 52 20                  db      CR,LF,"R 0-3          - Select ROM bank 0-3"
       00:041D: 30 2D 33 20 
       00:0421: 20 20 20 20 
       00:0425: 20 20 20 20 
       00:0429: 20 2D 20 53 
       00:042D: 65 6C 65 63 
       00:0431: 74 20 52 4F 
       00:0435: 4D 20 62 61 
       00:0439: 6E 6B 20 30 
       00:043D: 2D 33 
   637 00:043F: 0D 0A 55 20                  db      CR,LF,"U              - Perform ROM unlock sequence"
       00:0443: 20 20 20 20 
       00:0447: 20 20 20 20 
       00:044B: 20 20 20 20 
       00:044F: 20 2D 20 50 
       00:0453: 65 72 66 6F 
       00:0457: 72 6D 20 52 
       00:045B: 4F 4D 20 75 
       00:045F: 6E 6C 6F 63 
       00:0463: 6B 20 73 65 
       00:0467: 71 75 65 6E 
       00:046B: 63 65 
   638 00:046D: 0D 0A 58 20                  db      CR,LF,"X bbbb         - XMODEM upload to current bank"
       00:0471: 62 62 62 62 
       00:0475: 20 20 20 20 
       00:0479: 20 20 20 20 
       00:047D: 20 2D 20 58 
       00:0481: 4D 4F 44 45 
  Mon Nov  2 2015 22:33                                                                                                    Page 17


       00:0485: 4D 20 75 70 
       00:0489: 6C 6F 61 64 
       00:048D: 20 74 6F 20 
       00:0491: 63 75 72 72 
       00:0495: 65 6E 74 20 
       00:0499: 62 61 6E 6B 
   639 00:049D: 00                           db      0
   640                        
   641                                        end


      Lines assembled: 848
      Errors: 0
