  Tue Dec 29 2015 22:30                                                                                                    Page 1


                                               ***************************************
                                               **      WDC 65C816 Macro Assembler   **
                                               **                                   **
                                               **     Version 3.49.1- Feb  6 2006    **
                                               ***************************************

     1                        ;===============================================================================
     2                        ;  ______  ______        _   _            _
     3                        ; / ___\ \/ / __ )      | | | | __ _  ___| | _____ _ __
     4                        ; \___ \\  /|  _ \ _____| |_| |/ _` |/ __| |/ / _ \ '__|
     5                        ;  ___) /  \| |_) |_____|  _  | (_| | (__|   <  __/ |
     6                        ; |____/_/\_\____/      |_| |_|\__,_|\___|_|\_\___|_|
     7                        ;
     8                        ; A program for Hacking your W65C265SXB or W65C816SXB
     9                        ;-------------------------------------------------------------------------------
    10                        ; Copyright (C)2015 Andrew Jacobs
    11                        ; All rights reserved.
    12                        ;
    13                        ; This work is made available under the terms of the Creative Commons
    14                        ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
    15                        ; following URL to see the details.
    16                        ;
    17                        ; http://creativecommons.org/licenses/by-nc-sa/4.0/
    18                        ;
    19                        ;===============================================================================
    20                        ; Notes:
    21                        ;
    22                        ; This program provides a simple monitor that you can use to inspect the memory
    23                        ; in your SXB and reprogram parts of the flash ROM.
    24                        ;
    25                        ;-------------------------------------------------------------------------------
    26                        
    27                                        pw      132
    28                                        inclist on
    29                        
    30                                        chip    65816
    31                        
    32                                        include "w65c816.inc"
     1                        ;==============================================================================
     2                        ; __        ____  ____   ____ ___  _  __   
     3                        ; \ \      / / /_| ___| / ___( _ )/ |/ /_  
     4                        ;  \ \ /\ / / '_ \___ \| |   / _ \| | '_ \ 
     5                        ;   \ V  V /| (_) |__) | |__| (_) | | (_) |
     6                        ;    \_/\_/  \___/____/ \____\___/|_|\___/ 
     7                        ;
     8                        ; Western Design Center W65C816 device definitions                                          
     9                        ;------------------------------------------------------------------------------
    10                        ; Copyright (C)2015 HandCoded Software Ltd.
    11                        ; All rights reserved.
    12                        ;
    13                        ; This work is made available under the terms of the Creative Commons
    14                        ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
    15                        ; following URL to see the details.
    16                        ;
    17                        ; http://creativecommons.org/licenses/by-nc-sa/4.0/
    18                        ;
    19                        ;===============================================================================
    20                        ; Notes:
  Tue Dec 29 2015 22:30                                                                                                    Page 2


    21                        ;
    22                        ; Various macros and definitions for the W65C816 microprocessor.
    23                        ;
    24                        ;===============================================================================
    25                        ; Revision History:
    26                        ;
    27                        ; 2015-12-18 AJ Initial version
    28                        ;-------------------------------------------------------------------------------
    29                        ; $Id$
    30                        ;-------------------------------------------------------------------------------
    31                        
    32                        ;==============================================================================
    33                        ; Status Register Bits
    34                        ;------------------------------------------------------------------------------
    35                        
    36             00000080   N_FLAG          equ     1<<7
    37             00000040   V_FLAG          equ     1<<6
    38             00000020   M_FLAG          equ     1<<5
    39             00000010   X_FLAG          equ     1<<4
    40             00000010   B_FLAG          equ     1<<4
    41             00000008   D_FLAG          equ     1<<3
    42             00000004   I_FLAG          equ     1<<2
    43             00000002   Z_FLAG          equ     1<<1
    44             00000001   C_FLAG          equ     1<<0
    45                        
    46                        ;==============================================================================
    47                        ; Macros
    48                        ;------------------------------------------------------------------------------
    49                        
    50                        ; Puts the processor in emulation mode. A, X and Y become 8-bits and the stack
    51                        ; is fixed at $0100-$01ff. 
    52                        
    53                        emulate         macro
    54                                        sec
    55                                        xce
    56                                        endm
    57                        
    58                        ; Puts the processor in native mode. The size of the memory and index register
    59                        ; operations is not controlled by the M & X bits in the status register.
    60                        
    61                        native          macro
    62                                        clc
    63                                        xce
    64                                        endm
    65                        
    66                        ; Resets the M bit making the accumulator and memory accesses 16-bits wide.
    67                         
    68                        long_a          macro
    69                                        rep     #M_FLAG
    70                                        longa   on
    71                                        endm
    72                        
    73                        ; Resets the X bit making the index registers 16-bits wide
    74                        
    75                        long_i          macro
    76                                        rep     #X_FLAG
    77                                        longi   on
    78                                        endm
  Tue Dec 29 2015 22:30                                                                                                    Page 3


    79                        
    80                        ; Resets the M and X bits making the accumulator, memory accesses and index
    81                        ; registers 16-bits wide.
    82                                        
    83                        long_ai         macro
    84                                        rep     #M_FLAG|X_FLAG
    85                                        longa   on
    86                                        longi   on
    87                                        endm
    88                        
    89                        ; Sets the M bit making the accumulator and memory accesses 8-bits wide.
    90                        
    91                        short_a         macro
    92                                        sep     #M_FLAG
    93                                        longa   off
    94                                        endm
    95                        
    96                        ; Sets the X bit making the index registers 8-bits wide.
    97                        
    98                        short_i         macro
    99                                        sep     #X_FLAG
   100                                        longi   off
   101                                        endm
   102                                        
   103                        ; Sets the M & X bits making the accumulator, memory accesses and index
   104                        ; registers 8-bits wide.
   105                        
   106                        short_ai        macro
   107                                        sep     #M_FLAG|X_FLAG
   108                                        longa   off
   109                                        longi   off
   110                                        endm
    33                        
    34                        ;===============================================================================
    35                        ;-------------------------------------------------------------------------------
    36                        
    37                        MNEM            macro   P,Q,R
    38                                        dw      ((((P-'@')<<5)|(Q-'@'))<<5)|(R-'@')
    39                                        endm
    40                        
    41                        ;===============================================================================
    42                        ; ASCII Character Codes
    43                        ;-------------------------------------------------------------------------------
    44                        
    45             00000001   SOH             equ     $01
    46             00000004   EOT             equ     $04
    47             00000006   ACK             equ     $06
    48             00000007   BEL             equ     $07
    49             00000008   BS              equ     $08
    50             0000000A   LF              equ     $0a
    51             0000000D   CR              equ     $0d
    52             00000015   NAK             equ     $15
    53             00000018   CAN             equ     $18
    54             0000001B   ESC             equ     $1b
    55             0000007F   DEL             equ     $7f
    56                        
    57                        ;===============================================================================
    58                        ;-------------------------------------------------------------------------------
  Tue Dec 29 2015 22:30                                                                                                    Page 4


    59                        
    60             00000000   OP_ADC          equ     0<<1
    61             00000002   OP_AND          equ     1<<1
    62             00000004   OP_ASL          equ     2<<1
    63             00000006   OP_BCC          equ     3<<1
    64             00000008   OP_BCS          equ     4<<1
    65             0000000A   OP_BEQ          equ     5<<1
    66             0000000C   OP_BIT          equ     6<<1
    67             0000000E   OP_BMI          equ     7<<1
    68             00000010   OP_BNE          equ     8<<1
    69             00000012   OP_BPL          equ     9<<1
    70             00000014   OP_BRA          equ     10<<1
    71             00000016   OP_BRK          equ     11<<1
    72             00000018   OP_BRL          equ     12<<1
    73             0000001A   OP_BVC          equ     13<<1
    74             0000001C   OP_BVS          equ     14<<1
    75             0000001E   OP_CLC          equ     15<<1
    76             00000020   OP_CLD          equ     16<<1
    77             00000022   OP_CLI          equ     17<<1
    78             00000024   OP_CLV          equ     18<<1
    79             00000026   OP_CMP          equ     19<<1
    80             00000028   OP_COP          equ     20<<1
    81             0000002A   OP_CPX          equ     21<<1
    82             0000002C   OP_CPY          equ     22<<1
    83             0000002E   OP_DEC          equ     23<<1
    84             00000030   OP_DEX          equ     24<<1
    85             00000032   OP_DEY          equ     25<<1
    86             00000034   OP_EOR          equ     26<<1
    87             00000036   OP_INC          equ     27<<1
    88             00000038   OP_INX          equ     28<<1
    89             0000003A   OP_INY          equ     29<<1
    90             0000003C   OP_JML          equ     30<<1
    91             0000003E   OP_JMP          equ     31<<1
    92             00000040   OP_JSL          equ     32<<1
    93             00000042   OP_JSR          equ     33<<1
    94             00000044   OP_LDA          equ     34<<1
    95             00000046   OP_LDX          equ     35<<1
    96             00000048   OP_LDY          equ     36<<1
    97             0000004A   OP_LSR          equ     37<<1
    98             0000004C   OP_MVN          equ     38<<1
    99             0000004E   OP_MVP          equ     39<<1
   100             00000050   OP_NOP          equ     40<<1
   101             00000052   OP_ORA          equ     41<<1
   102             00000054   OP_PEA          equ     42<<1
   103             00000056   OP_PEI          equ     43<<1
   104             00000058   OP_PER          equ     44<<1
   105             0000005A   OP_PHA          equ     45<<1
   106             0000005C   OP_PHB          equ     46<<1
   107             0000005E   OP_PHD          equ     47<<1
   108             00000060   OP_PHK          equ     48<<1
   109             00000062   OP_PHP          equ     49<<1
   110             00000064   OP_PHX          equ     50<<1
   111             00000066   OP_PHY          equ     51<<1
   112             00000068   OP_PLA          equ     52<<1
   113             0000006A   OP_PLB          equ     53<<1
   114             0000006C   OP_PLD          equ     54<<1
   115             0000006E   OP_PLP          equ     55<<1
   116             00000070   OP_PLX          equ     56<<1
  Tue Dec 29 2015 22:30                                                                                                    Page 5


   117             00000072   OP_PLY          equ     57<<1
   118             00000074   OP_REP          equ     58<<1
   119             00000076   OP_ROL          equ     59<<1
   120             00000078   OP_ROR          equ     60<<1
   121             0000007A   OP_RTI          equ     61<<1
   122             0000007C   OP_RTL          equ     62<<1
   123             0000007E   OP_RTS          equ     63<<1
   124             00000080   OP_SBC          equ     64<<1
   125             00000082   OP_SEC          equ     65<<1
   126             00000084   OP_SED          equ     66<<1
   127             00000086   OP_SEI          equ     67<<1
   128             00000088   OP_SEP          equ     68<<1
   129             0000008A   OP_STA          equ     69<<1
   130             0000008C   OP_STP          equ     70<<1
   131             0000008E   OP_STX          equ     71<<1
   132             00000090   OP_STY          equ     72<<1
   133             00000092   OP_STZ          equ     73<<1
   134             00000094   OP_TAX          equ     74<<1
   135             00000096   OP_TAY          equ     75<<1
   136             00000098   OP_TCD          equ     76<<1
   137             0000009A   OP_TCS          equ     77<<1
   138             0000009C   OP_TDC          equ     78<<1
   139             0000009E   OP_TRB          equ     79<<1
   140             000000A0   OP_TSB          equ     80<<1
   141             000000A2   OP_TSC          equ     81<<1
   142             000000A4   OP_TSX          equ     82<<1
   143             000000A6   OP_TXA          equ     83<<1
   144             000000A8   OP_TXS          equ     84<<1
   145             000000AA   OP_TXY          equ     85<<1
   146             000000AC   OP_TYA          equ     86<<1
   147             000000AE   OP_TYX          equ     87<<1
   148             000000B0   OP_WAI          equ     88<<1
   149             000000B2   OP_WDM          equ     89<<1
   150             000000B4   OP_XBA          equ     90<<1
   151             000000B6   OP_XCE          equ     91<<1
   152                        
   153             00000000   MD_ABS          equ     0<<1                    ; a
   154             00000002   MD_ACC          equ     1<<1                    ; A
   155             00000004   MD_ABX          equ     2<<1                    ; a,x
   156             00000006   MD_ABY          equ     3<<1                    ; a,y
   157             00000008   MD_ALG          equ     4<<1                    ; al
   158             0000000A   MD_ALX          equ     5<<1                    ; al,x
   159             0000000C   MD_AIN          equ     6<<1                    ; (a)
   160             0000000E   MD_AIX          equ     7<<1                    ; (a,x)
   161             00000010   MD_DPG          equ     8<<1                    ; d
   162             00000012   MD_STK          equ     9<<1                    ; d,s
   163             00000014   MD_DPX          equ     10<<1                   ; d,x
   164             00000016   MD_DPY          equ     11<<1                   ; d,x
   165             00000018   MD_DIN          equ     12<<1                   ; (d)
   166             0000001A   MD_DLI          equ     13<<1                   ; [d]
   167             0000001C   MD_SKY          equ     14<<1                   ; (d,s),y
   168             0000001E   MD_DIX          equ     15<<1                   ; (d,x)
   169             00000020   MD_DIY          equ     16<<1                   ; (d),y
   170             00000022   MD_DLY          equ     17<<1                   ; [d],y
   171             00000024   MD_IMP          equ     18<<1                   ;
   172             00000026   MD_REL          equ     19<<1                   ; r
   173             00000028   MD_RLG          equ     20<<1                   ; rl
   174             0000002A   MD_MOV          equ     21<<1                   ; xyc
  Tue Dec 29 2015 22:30                                                                                                    Page 6


   175             0000002C   MD_IMM          equ     22<<1                   ; # (A or M)
   176             0000002E   MD_INT          equ     23<<1                   ; # (BRK/COP/WDM)
   177             00000030   MD_IMX          equ     24<<1                   ; # (X or Y)
   178                        
   179                        ;===============================================================================
   180                        ; Data Areas
   181                        ;-------------------------------------------------------------------------------
   182                        
   183                                        page0
   184                                        org     $20
   185                        
   186 00:0020:              FLAGS           ds      1                       ; Emulated processor flags
   187 00:0021:              BUFLEN          ds      1                       ; Command buffer length
   188 00:0022:              BANK            ds      1                       ; Memory bank
   189                        
   190 00:0023:              ADDR_S          ds      3                       ; Start address
   191 00:0026:              ADDR_E          ds      3                       ; End address
   192                        
   193 00:0029:              BLOCK           ds      1                       ; XMODEM block number
   194 00:002A:              RETRIES         ds      1                       ; Retry count
   195 00:002B:              SUM             ds      1                       ; Checksum
   196                        
   197 00:002C:              TEMP            ds      4                       ; Scratch workspace
   198                        
   199                                        data
   200                                        org     $200
   201                        
   202 00:0200:              BUFFER          ds      128                     ; Command buffer
   203                        
   204                        ;===============================================================================
   205                        ; Initialisation
   206                        ;-------------------------------------------------------------------------------
   207                        
   208                                        code
   209                                        public  Start
   210                                        extern  UartRx
   211                                        extern  UartTx
   212                                        extern  UartRxTest
   213                                        extern  RomSelect
   214                                        extern  RomCheck
   215                        Start:
   216                                        short_a                         ; Configure register sizes
+  216 00:0000: E2 20                        sep     #M_FLAG
+  216                                        longa   off
   217                                        long_i
+  217 00:0002: C2 10                        rep     #X_FLAG
+  217                                        longi   on
   218 00:0004: 20 xx xx                     jsr     TxCRLF
   219 00:0007: A2 xx xx                     ldx     #TITLE                  ; Display application title
   220 00:000A: 20 xx xx                     jsr     TxStr
   221                        
   222 00:000D: 64 22                        stz     BANK                    ; Reset default bank
   223                        
   224                        ;===============================================================================
   225                        ; Command Processor
   226                        ;-------------------------------------------------------------------------------
   227                        
   228                        NewCommand:
  Tue Dec 29 2015 22:30                                                                                                    Page 7


   229 00:000F: 64 21                        stz     BUFLEN                  ; Clear the buffer
   230                        ShowCommand:
   231                                        short_i
+  231 00:0011: E2 10                        sep     #X_FLAG
+  231                                        longi   off
   232 00:0013: 20 xx xx                     jsr     TxCRLF                  ; Move to a new line
   233                        
   234 00:0016: A9 2E                        lda     #'.'                    ; Output the prompt
   235 00:0018: 20 xx xx                     jsr     UartTx
   236                        
   237 00:001B: A2 00                        ldx     #0
   238 00:001D: E4 21        DisplayCmd:     cpx     BUFLEN                  ; Any saved characters
   239 00:001F: F0 0E                        beq     ReadCommand
   240 00:0021: BD 00 02                     lda     BUFFER,x                ; Yes, display them
   241 00:0024: 20 xx xx                     jsr     UartTx
   242 00:0027: E8                           inx
   243 00:0028: 80 F3                        bra     DisplayCmd
   244                        
   245                        RingBell:
   246 00:002A: A9 07                        lda     #BEL                    ; Make a beep
   247 00:002C: 20 xx xx                     jsr     UartTx
   248                        
   249                        ReadCommand:
   250 00:002F: 20 xx xx                     jsr     UartRx                  ; Wait for character
   251                        
   252 00:0032: C9 1B                        cmp     #ESC                    ; Cancel input?
   253 00:0034: F0 D9                        beq     NewCommand              ; Yes, clear and restart
   254 00:0036: C9 0D                        cmp     #CR                     ; End of command?
   255 00:0038: F0 2D                        beq     ProcessCommand          ; Yes, start processing
   256                        
   257 00:003A: C9 08                        cmp     #BS                     ; Back space?
   258 00:003C: F0 15                        beq     BackSpace
   259 00:003E: C9 7F                        cmp     #DEL                    ; Delete?
   260 00:0040: F0 11                        beq     BackSpace
   261                        
   262 00:0042: C9 20                        cmp     #' '                    ; Printable character
   263 00:0044: 90 E4                        bcc     RingBell                ; No.
   264 00:0046: C9 7F                        cmp     #DEL
   265 00:0048: B0 E0                        bcs     RingBell                ; No.
   266 00:004A: 9D 00 02                     sta     BUFFER,x                ; Save the character
   267 00:004D: E8                           inx
   268 00:004E: 20 xx xx                     jsr     UartTx                  ; Echo it and repeat
   269 00:0051: 80 DC                        bra     ReadCommand
   270                        
   271                        BackSpace:
   272 00:0053: E0 00                        cpx     #0                      ; Buffer empty?
   273 00:0055: F0 D3                        beq     RingBell                ; Yes, beep and continue
   274 00:0057: CA                           dex                             ; No, remove last character
   275 00:0058: A9 08                        lda     #BS
   276 00:005A: 20 xx xx                     jsr     UartTx
   277 00:005D: 20 xx xx                     jsr     TxSpace
   278 00:0060: A9 08                        lda     #BS
   279 00:0062: 20 xx xx                     jsr     UartTx
   280 00:0065: 80 C8                        bra     ReadCommand             ; And retry
   281                        
   282                        ProcessCommand:
   283 00:0067: 86 21                        stx     BUFLEN                  ; Save final length
   284 00:0069: A0 00                        ldy     #0                      ; Load index for start
  Tue Dec 29 2015 22:30                                                                                                    Page 8


   285                        
   286 00:006B: 20 xx xx                     jsr     SkipSpaces              ; Fetch command character
   287 00:006E: B0 9F                        bcs     NewCommand              ; None, empty command
   288                        
   289                        ;===============================================================================
   290                        ; B - Select Memory Bank
   291                        ;-------------------------------------------------------------------------------
   292                        
   293 00:0070: C9 42                        cmp     #'B'                    ; Select memory bank?
   294 00:0072: D0 0D                        bne     NotMemoryBank
   295                        
   296 00:0074: A2 22                        ldx     #BANK                   ; Parse bank
   297 00:0076: 20 xx xx                     jsr     GetByte
   298 00:0079: 90 03                        bcc     $+5
   299 00:007B: 4C xx xx                     jmp     ShowError
   300 00:007E: 4C xx xx                     jmp     NewCommand
   301                        NotMemoryBank:
   302                        
   303                        ;===============================================================================
   304                        ; D - Disassemble Memory
   305                        ;-------------------------------------------------------------------------------
   306                        
   307 00:0081: C9 44                        cmp     #'D'                    ; Memory display?
   308 00:0083: D0 52                        bne     NotDisassemble
   309                        
   310 00:0085: A2 23                        ldx     #ADDR_S                 ; Parse start address
   311 00:0087: 20 xx xx                     jsr     GetAddr
   312 00:008A: 90 03                        bcc     $+5
   313 00:008C: 4C xx xx                     jmp     ShowError
   314 00:008F: A2 26                        ldx     #ADDR_E                 ; Parse end address
   315 00:0091: 20 xx xx                     jsr     GetAddr
   316 00:0094: 90 03                        bcc     $+5
   317 00:0096: 4C xx xx                     jmp     ShowError
   318                        
   319 00:0099: 08                           php
   320 00:009A: 68                           pla
   321 00:009B: 85 20                        sta     FLAGS
   322                        
   323                        Disassemble:
   324 00:009D: 20 xx xx                     jsr     TxCRLF
   325 00:00A0: A5 25                        lda     ADDR_S+2                ; Show memory address
   326 00:00A2: 20 xx xx                     jsr     TxHex2
   327 00:00A5: A9 3A                        lda     #':'
   328 00:00A7: 20 xx xx                     jsr     UartTx
   329 00:00AA: A5 24                        lda     ADDR_S+1
   330 00:00AC: 20 xx xx                     jsr     TxHex2
   331 00:00AF: A5 23                        lda     ADDR_S+0
   332 00:00B1: 20 xx xx                     jsr     TxHex2
   333 00:00B4: 20 xx xx                     jsr     TxSpace
   334                        
   335 00:00B7: 20 xx xx                     jsr     TxCodeBytes             ; Show code bytes
   336 00:00BA: 20 xx xx                     jsr     TxSymbolic              ; And instruction
   337                        
   338 00:00BD: A7 23                        lda     [ADDR_S]                ; Fetch opcode again
   339 00:00BF: 20 xx xx                     jsr     OpcodeSize
   340                        
   341 00:00C2: 18                           clc
   342 00:00C3: 65 23                        adc     ADDR_S+0                ; And move start address on
  Tue Dec 29 2015 22:30                                                                                                    Page 9


   343 00:00C5: 85 23                        sta     ADDR_S+0
   344 00:00C7: 90 02                        bcc     $+4
   345 00:00C9: E6 24                        inc     ADDR_S+1
   346                        
   347 00:00CB: 38                           sec                             ; Exceeded the end address?
   348 00:00CC: E5 26                        sbc     ADDR_E+0
   349 00:00CE: A5 24                        lda     ADDR_S+1
   350 00:00D0: E5 27                        sbc     ADDR_E+1
   351 00:00D2: 30 C9                        bmi     Disassemble             ; No, show more
   352                        
   353 00:00D4: 4C xx xx                     jmp     NewCommand              ; Done
   354                        NotDisassemble:
   355                        
   356                        ;===============================================================================
   357                        ; E - Erase ROM bank
   358                        ;-------------------------------------------------------------------------------
   359                        
   360 00:00D7: C9 45                        cmp     #'E'                    ; Erase bank?
   361 00:00D9: D0 45                        bne     NotEraseBank
   362                        
   363 00:00DB: 20 xx xx                     jsr     CheckSafe
   364                        
   365 00:00DE: A9 00                        lda     #$00                    ; Set start address
   366 00:00E0: 85 23                        sta     ADDR_S+0
   367 00:00E2: A9 80                        lda     #$80
   368 00:00E4: 85 24                        sta     ADDR_S+1
   369                        EraseLoop:
   370 00:00E6: A9 AA                        lda     #$aa                    ; Unlock flash
   371 00:00E8: 8D 55 D5                     sta     $8000+$5555
   372 00:00EB: A9 55                        lda     #$55
   373 00:00ED: 8D AA AA                     sta     $8000+$2aaa
   374 00:00F0: A9 80                        lda     #$80                    ; Signal erase
   375 00:00F2: 8D 55 D5                     sta     $8000+$5555
   376 00:00F5: A9 AA                        lda     #$aa
   377 00:00F7: 8D 55 D5                     sta     $8000+$5555
   378 00:00FA: A9 55                        lda     #$55
   379 00:00FC: 8D AA AA                     sta     $8000+$2aaa
   380 00:00FF: A9 30                        lda     #$30                    ; Sector erase
   381 00:0101: 92 23                        sta     (ADDR_S)
   382                        
   383                        EraseWait:
   384 00:0103: B2 23                        lda     (ADDR_S)                ; Wait for erase to finish
   385 00:0105: C9 FF                        cmp     #$FF
   386 00:0107: D0 FA                        bne     EraseWait
   387                        
   388 00:0109: 18                           clc                             ; Move to next sector
   389 00:010A: A5 24                        lda     ADDR_S+1
   390 00:010C: 69 10                        adc     #$10
   391 00:010E: 85 24                        sta     ADDR_S+1
   392 00:0110: 90 D4                        bcc     EraseLoop               ; Repeat until end of memory
   393 00:0112: 4C xx xx                     jmp     NewCommand              ; And start over
   394                        
   395                        EraseFailed:
   396                                        long_i                          ; Warn that erase failed
+  396 00:0115: C2 10                        rep     #X_FLAG
+  396                                        longi   on
   397 00:0117: A2 xx xx                     ldx     #ERASE_FAILED
   398 00:011A: 20 xx xx                     jsr     TxStr
  Tue Dec 29 2015 22:30                                                                                                    Page 10


   399                                        longi   off
   400 00:011D: 4C xx xx                     jmp     NewCommand              ; And start over
   401                        NotEraseBank:
   402                        
   403                        ;===============================================================================
   404                        ; F - WDC Mask ROM Enable/Disable
   405                        ;-------------------------------------------------------------------------------
   406                        
   407                                        ifdef   W65C265SXB
   408                                        cmp     #'F'
   409                                        bne     NotMaskROM
   410                        
   411                                        ; TODO
   412                        
   413                                        jmp     NewCommand
   414                        NotMaskROM:
   415                                        endif
   416                        
   417                        ;===============================================================================
   418                        ; G - Goto
   419                        ;-------------------------------------------------------------------------------
   420                        
   421 00:0120: C9 47                        cmp     #'G'                    ; Invoke code
   422 00:0122: D0 0D                        bne     NotGoto
   423                        
   424 00:0124: A2 23                        ldx     #ADDR_S                 ; Parse execution address
   425 00:0126: 20 xx xx                     jsr     GetAddr
   426 00:0129: B0 03                        bcs     $+5
   427 00:012B: DC 23 00                     jmp     [ADDR_S]                ; Run from address
   428 00:012E: 6C FC FF                     jmp     ($FFFC)                 ; Otherwise reset
   429                        NotGoto:
   430                        
   431                        ;===============================================================================
   432                        ; M - Display Memory
   433                        ;-------------------------------------------------------------------------------
   434                        
   435 00:0131: C9 4D                        cmp     #'M'                    ; Memory display?
   436 00:0133: D0 70                        bne     NotMemoryDisplay
   437                        
   438 00:0135: A2 23                        ldx     #ADDR_S                 ; Parse start address
   439 00:0137: 20 xx xx                     jsr     GetAddr
   440 00:013A: 90 03                        bcc     $+5
   441 00:013C: 4C xx xx                     jmp     ShowError
   442 00:013F: A2 26                        ldx     #ADDR_E                 ; Parse end address
   443 00:0141: 20 xx xx                     jsr     GetAddr
   444 00:0144: 90 03                        bcc     $+5
   445 00:0146: 4C xx xx                     jmp     ShowError
   446                        
   447                        DisplayMemory:
   448 00:0149: 20 xx xx                     jsr     TxCRLF
   449 00:014C: A5 25                        lda     ADDR_S+2                ; Show memory address
   450 00:014E: 20 xx xx                     jsr     TxHex2
   451 00:0151: A9 3A                        lda     #':'
   452 00:0153: 20 xx xx                     jsr     UartTx
   453 00:0156: A5 24                        lda     ADDR_S+1
   454 00:0158: 20 xx xx                     jsr     TxHex2
   455 00:015B: A5 23                        lda     ADDR_S+0
   456 00:015D: 20 xx xx                     jsr     TxHex2
  Tue Dec 29 2015 22:30                                                                                                    Page 11


   457                        
   458 00:0160: A0 00                        ldy     #0                      ; Show sixteen bytes of data
   459 00:0162: 20 xx xx     ByteLoop:       jsr     TxSpace
   460 00:0165: B7 23                        lda     [ADDR_S],y
   461 00:0167: 20 xx xx                     jsr     TxHex2
   462 00:016A: C8                           iny
   463 00:016B: C0 10                        cpy     #16
   464 00:016D: D0 F3                        bne     ByteLoop
   465                        
   466 00:016F: 20 xx xx                     jsr     TxSpace
   467 00:0172: A9 7C                        lda     #'|'
   468 00:0174: 20 xx xx                     jsr     UartTx
   469 00:0177: A0 00                        ldy     #0                      ; Show sixteen characters
   470 00:0179: B7 23        CharLoop:       lda     [ADDR_S],Y
   471 00:017B: 20 xx xx                     jsr     IsPrintable
   472 00:017E: B0 02                        bcs     $+4
   473 00:0180: A9 2E                        lda     #'.'
   474 00:0182: 20 xx xx                     jsr     UartTx
   475 00:0185: C8                           iny
   476 00:0186: C0 10                        cpy     #16
   477 00:0188: D0 EF                        bne     CharLoop
   478 00:018A: A9 7C                        lda     #'|'
   479 00:018C: 20 xx xx                     jsr     UartTx
   480                        
   481 00:018F: 18                           clc                             ; Bump the display address
   482 00:0190: 98                           tya
   483 00:0191: 65 23                        adc     ADDR_S+0
   484 00:0193: 85 23                        sta     ADDR_S+0
   485 00:0195: 90 02                        bcc     $+4
   486 00:0197: E6 24                        inc     ADDR_S+1
   487                        
   488 00:0199: 38                           sec                             ; Exceeded the end address?
   489 00:019A: E5 26                        sbc     ADDR_E+0
   490 00:019C: A5 24                        lda     ADDR_S+1
   491 00:019E: E5 27                        sbc     ADDR_E+1
   492 00:01A0: 30 A7                        bmi     DisplayMemory           ; No, show more
   493                        
   494 00:01A2: 4C xx xx                     jmp     NewCommand
   495                        NotMemoryDisplay:
   496                        
   497                        ;===============================================================================
   498                        ; S - S19 Record
   499                        ;-------------------------------------------------------------------------------
   500                        
   501 00:01A5: C9 53                        cmp     #'S'                    ; S19?
   502 00:01A7: F0 03                        beq     $+5
   503 00:01A9: 4C xx xx                     jmp     NotS19
   504                        
   505 00:01AC: 20 xx xx                     jsr     NextChar                ; Get record type
   506 00:01AF: B0 75                        bcs     S19Fail
   507 00:01B1: C9 31                        cmp     #'1'                    ; Only process type 1
   508 00:01B3: D0 6E                        bne     S19Done
   509                        
   510 00:01B5: A2 26                        ldx     #ADDR_E                 ; Get byte count
   511 00:01B7: 20 xx xx                     jsr     GetByte
   512 00:01BA: B0 6A                        bcs     S19Fail
   513 00:01BC: A5 26                        lda     ADDR_E                  ; Use as initial checksum
   514 00:01BE: 85 2B                        sta     SUM
  Tue Dec 29 2015 22:30                                                                                                    Page 12


   515 00:01C0: C6 26                        dec     ADDR_E
   516 00:01C2: F0 62                        beq     S19Fail
   517                        
   518 00:01C4: A2 23                        ldx     #ADDR_S                 ; Get address
   519 00:01C6: 20 xx xx                     jsr     GetAddr
   520 00:01C9: B0 5B                        bcs     S19Fail
   521 00:01CB: A5 23                        lda     ADDR_S+0                ; Add to checksum
   522 00:01CD: 65 24                        adc     ADDR_S+1
   523 00:01CF: 18                           clc
   524 00:01D0: 65 2B                        adc     SUM
   525 00:01D2: 85 2B                        sta     SUM
   526 00:01D4: C6 26                        dec     ADDR_E
   527 00:01D6: F0 4E                        beq     S19Fail
   528 00:01D8: C6 26                        dec     ADDR_E
   529 00:01DA: F0 4A                        beq     S19Fail
   530                        
   531                        S19Load:
   532 00:01DC: A2 2C                        ldx     #TEMP                   ; Fetch a data byte
   533 00:01DE: 20 xx xx                     jsr     GetByte
   534 00:01E1: B0 43                        bcs     S19Fail
   535 00:01E3: A5 2C                        lda     TEMP
   536 00:01E5: 65 2B                        adc     SUM
   537 00:01E7: 85 2B                        sta     SUM
   538 00:01E9: C6 26                        dec     ADDR_E
   539 00:01EB: F0 39                        beq     S19Fail
   540                        
   541 00:01ED: A5 25                        lda     ADDR_S+2                ; Writing to ROM?
   542 00:01EF: D0 13                        bne     WriteS19                ; No
   543 00:01F1: 24 24                        bit     ADDR_S+1
   544 00:01F3: 10 0F                        bpl     WriteS19                ; No
   545                        
   546 00:01F5: A9 AA                        lda     #$aa                    ; Yes, unlock flash
   547 00:01F7: 8D 55 D5                     sta     $8000+$5555
   548 00:01FA: A9 55                        lda     #$55
   549 00:01FC: 8D AA AA                     sta     $8000+$2aaa
   550 00:01FF: A9 A0                        lda     #$a0                    ; Start byte write
   551 00:0201: 8D 55 D5                     sta     $8000+$5555
   552                        WriteS19:
   553 00:0204: A5 2C                        lda     TEMP                    ; Write the value
   554 00:0206: 87 23                        sta     [ADDR_S]
   555                        
   556 00:0208: E6 23                        inc     ADDR_S+0                ; Bump address by one
   557 00:020A: D0 02                        bne     $+4
   558 00:020C: E6 24                        inc     ADDR_S+1
   559                        
   560 00:020E: A5 26                        lda     ADDR_E                  ; Reached checksum?
   561 00:0210: C9 01                        cmp     #1
   562 00:0212: D0 C8                        bne     S19Load
   563                        
   564 00:0214: A2 2C                        ldx     #TEMP                   ; Yes, read it
   565 00:0216: 20 xx xx                     jsr     GetByte
   566 00:0219: B0 0B                        bcs     S19Fail
   567 00:021B: A5 2C                        lda     TEMP
   568 00:021D: 65 2B                        adc     SUM
   569 00:021F: C9 FF                        cmp     #$ff                    ; Checksum correct?
   570 00:0221: D0 03                        bne     S19Fail
   571                        
   572 00:0223: 4C xx xx     S19Done:        jmp     NewCommand              ; Get
  Tue Dec 29 2015 22:30                                                                                                    Page 13


   573                        
   574                        S19Fail:
   575                                        long_i                          ; Display error message
+  575 00:0226: C2 10                        rep     #X_FLAG
+  575                                        longi   on
   576 00:0228: A2 xx xx                     ldx     #INVALID_S19
   577 00:022B: 20 xx xx                     jsr     TxStr
   578                                        longi   off
   579 00:022E: 4C xx xx                     jmp     NewCommand              ; And start over
   580                        NotS19:
   581                        
   582                        ;===============================================================================
   583                        ; R - Select ROM Bank
   584                        ;-------------------------------------------------------------------------------
   585                        
   586 00:0231: C9 52                        cmp     #'R'                    ; ROM Bank?
   587 00:0233: D0 16                        bne     NotROMBank              ; No
   588                        
   589 00:0235: 20 xx xx                     jsr     SkipSpaces              ; Find first argument
   590 00:0238: 90 03                        bcc     $+5                     ; Success?
   591 00:023A: 4C xx xx     BankFail:       jmp     ShowError               ; No
   592                        
   593 00:023D: C9 30                        cmp     #'0'                    ; Check bank is 0..3
   594 00:023F: 90 F9                        bcc     BankFail
   595 00:0241: C9 34                        cmp     #'3'+1
   596 00:0243: B0 F5                        bcs     BankFail
   597                        
   598 00:0245: 20 xx xx                     jsr     RomSelect               ; Switch ROM banks
   599 00:0248: 4C xx xx                     jmp     NewCommand              ; Done
   600                        NotROMBank:
   601                        
   602                        ;===============================================================================
   603                        ; W - Write memory
   604                        ;-------------------------------------------------------------------------------
   605                        
   606 00:024B: C9 57                        cmp     #'W'                    ; Write memory?
   607 00:024D: D0 58                        bne     NotWrite
   608                        
   609 00:024F: A2 23                        ldx     #ADDR_S                 ; Parse start address
   610 00:0251: 20 xx xx                     jsr     GetAddr
   611 00:0254: 90 03                        bcc     $+5
   612 00:0256: 4C xx xx                     jmp     ShowError
   613                        
   614 00:0259: 24 24                        bit     ADDR_S+1                ; Load into ROM area?
   615 00:025B: 10 03                        bpl     $+5
   616 00:025D: 20 xx xx                     jsr     CheckSafe               ; Yes, check selection
   617                        
   618 00:0260: A2 26                        ldx     #ADDR_E                 ; Parse value byte
   619 00:0262: 20 xx xx                     jsr     GetByte                 ; Is there a value?
   620 00:0265: 90 03                        bcc     $+5
   621 00:0267: 4C xx xx                     jmp     NewCommand              ; No.
   622                        
   623 00:026A: A5 25                        lda     ADDR_S+2                ; Writing to ROM?
   624 00:026C: D0 13                        bne     WriteMemory             ; No
   625 00:026E: 24 24                        bit     ADDR_S+1
   626 00:0270: 10 0F                        bpl     WriteMemory             ; No
   627                        
   628 00:0272: A9 AA                        lda     #$aa                    ; Yes, unlock flash
  Tue Dec 29 2015 22:30                                                                                                    Page 14


   629 00:0274: 8D 55 D5                     sta     $8000+$5555
   630 00:0277: A9 55                        lda     #$55
   631 00:0279: 8D AA AA                     sta     $8000+$2aaa
   632 00:027C: A9 A0                        lda     #$a0                    ; Start byte write
   633 00:027E: 8D 55 D5                     sta     $8000+$5555
   634                        WriteMemory:
   635 00:0281: A5 26                        lda     ADDR_E                  ; Write the value
   636 00:0283: 87 23                        sta     [ADDR_S]
   637                        
   638 00:0285: E6 23                        inc     ADDR_S+0                ; Bump address by one
   639 00:0287: D0 02                        bne     $+4
   640 00:0289: E6 24                        inc     ADDR_S+1
   641                        
   642 00:028B: A9 57                        lda     #'W'                    ; Build command for next byte
   643 00:028D: 20 xx xx                     jsr     StartCommand
   644 00:0290: A9 20                        lda     #' '
   645 00:0292: 20 xx xx                     jsr     BuildCommand
   646 00:0295: A5 24                        lda     ADDR_S+1                ; Add the next address
   647 00:0297: 20 xx xx                     jsr     BuildByte
   648 00:029A: A5 23                        lda     ADDR_S+0
   649 00:029C: 20 xx xx                     jsr     BuildByte
   650 00:029F: A9 20                        lda     #' '
   651 00:02A1: 20 xx xx                     jsr     BuildCommand
   652 00:02A4: 4C xx xx                     jmp     ShowCommand             ; And prompt for data
   653                        
   654                        NotWrite:
   655                        
   656                        ;===============================================================================
   657                        ; X - XMODEM Receive
   658                        ;-------------------------------------------------------------------------------
   659                        
   660 00:02A7: C9 58                        cmp     #'X'                    ; XModem upload?
   661 00:02A9: F0 03                        beq     $+5                     ; Yes.
   662 00:02AB: 4C xx xx                     jmp     NotXModem
   663                        
   664 00:02AE: A2 23                        ldx     #ADDR_S                 ; Parse start address
   665 00:02B0: 20 xx xx                     jsr     GetAddr
   666 00:02B3: 90 03                        bcc     $+5
   667 00:02B5: 4C xx xx                     jmp     ShowError
   668                        
   669 00:02B8: 24 24                        bit     ADDR_S+1                ; Load into ROM area?
   670 00:02BA: 10 03                        bpl     $+5
   671 00:02BC: 20 xx xx                     jsr     CheckSafe               ; Yes, check selection
   672                        
   673                                        long_i                          ; Display waiting message
+  673 00:02BF: C2 10                        rep     #X_FLAG
+  673                                        longi   on
   674 00:02C1: A2 xx xx                     ldx     #WAITING
   675 00:02C4: 20 xx xx                     jsr     TxStr
   676 00:02C7: 20 xx xx                     jsr     TxCRLF
   677                                        short_i
+  677 00:02CA: E2 10                        sep     #X_FLAG
+  677                                        longi   off
   678 00:02CC: 64 29                        stz     BLOCK                   ; Reset the block number
   679 00:02CE: E6 29                        inc     BLOCK
   680                        
   681                        ResetRetries:
   682 00:02D0: A9 0A                        lda     #10                     ; Reset the retry counter
  Tue Dec 29 2015 22:30                                                                                                    Page 15


   683 00:02D2: 85 2A                        sta     RETRIES
   684                        
   685                        TransferWait:
   686 00:02D4: 64 2C                        stz     TEMP+0                  ; Clear timeout counter
   687 00:02D6: 64 2D                        stz     TEMP+1
   688 00:02D8: A9 EC                        lda     #-20
   689 00:02DA: 85 2E                        sta     TEMP+2
   690                        TransferPoll:
   691 00:02DC: 20 xx xx                     jsr     UartRxTest              ; Any data yet?
   692 00:02DF: B0 20                        bcs     TransferScan
   693 00:02E1: E6 2C                        inc     TEMP+0
   694 00:02E3: D0 F7                        bne     TransferPoll
   695 00:02E5: E6 2D                        inc     TEMP+1
   696 00:02E7: D0 F3                        bne     TransferPoll
   697 00:02E9: E6 2E                        inc     TEMP+2
   698 00:02EB: D0 EF                        bne     TransferPoll
   699 00:02ED: C6 2A                        dec     RETRIES
   700 00:02EF: F0 05                        beq     TimedOut
   701 00:02F1: 20 xx xx                     jsr     SendNAK                 ; Send a NAK
   702 00:02F4: 80 DE                        bra     TransferWait
   703                        
   704                        TimedOut:
   705                                        long_i
+  705 00:02F6: C2 10                        rep     #X_FLAG
+  705                                        longi   on
   706 00:02F8: A2 xx xx                     ldx     #TIMEOUT
   707 00:02FB: 20 xx xx                     jsr     TxStr
   708                                        longi   off
   709 00:02FE: 4C xx xx                     jmp     NewCommand
   710                        
   711                        TransferScan:
   712 00:0301: 20 xx xx                     jsr     UartRx                  ; Wait for SOH or EOT
   713 00:0304: C9 04                        cmp     #EOT
   714 00:0306: F0 63                        beq     TransferDone
   715 00:0308: C9 01                        cmp     #SOH
   716 00:030A: D0 C8                        bne     TransferWait
   717 00:030C: 20 xx xx                     jsr     UartRx                  ; Check the block number
   718 00:030F: C5 29                        cmp     BLOCK
   719 00:0311: D0 52                        bne     TransferError
   720 00:0313: 20 xx xx                     jsr     UartRx                  ; Check inverted block
   721 00:0316: 49 FF                        eor     #$ff
   722 00:0318: C5 29                        cmp     BLOCK
   723 00:031A: D0 49                        bne     TransferError
   724                        
   725 00:031C: A0 00                        ldy     #0
   726 00:031E: 84 2B                        sty     SUM                     ; Clear the check sum
   727                        TransferBlock:
   728 00:0320: 20 xx xx                     jsr     UartRx
   729 00:0323: 48                           pha
   730                        
   731 00:0324: A5 25                        lda     ADDR_S+2                ; Writing to ROM?
   732 00:0326: D0 13                        bne     WriteByte               ; No
   733 00:0328: 24 24                        bit     ADDR_S+1
   734 00:032A: 10 0F                        bpl     WriteByte               ; No
   735                        
   736 00:032C: A9 AA                        lda     #$aa                    ; Yes, unlock flash
   737 00:032E: 8D 55 D5                     sta     $8000+$5555
   738 00:0331: A9 55                        lda     #$55
  Tue Dec 29 2015 22:30                                                                                                    Page 16


   739 00:0333: 8D AA AA                     sta     $8000+$2aaa
   740 00:0336: A9 A0                        lda     #$a0                    ; Start byte write
   741 00:0338: 8D 55 D5                     sta     $8000+$5555
   742                        
   743                        WriteByte:
   744 00:033B: 68                           pla
   745 00:033C: 97 23                        sta     [ADDR_S],Y
   746                        
   747                        WriteWait:
   748 00:033E: D7 23                        cmp     [ADDR_S],Y              ; Wait for write
   749 00:0340: D0 FC                        bne     WriteWait
   750                        
   751 00:0342: 18                           clc                             ; Add to check sum
   752 00:0343: 65 2B                        adc     SUM
   753 00:0345: 85 2B                        sta     SUM
   754 00:0347: C8                           iny
   755 00:0348: C0 80                        cpy     #128
   756 00:034A: D0 D4                        bne     TransferBlock
   757 00:034C: 20 xx xx                     jsr     UartRx                  ; Check the check sum
   758 00:034F: C5 2B                        cmp     SUM
   759 00:0351: D0 12                        bne     TransferError           ; Failed
   760 00:0353: 18                           clc
   761 00:0354: 98                           tya
   762 00:0355: 65 23                        adc     ADDR_S+0                ; Bump address one block
   763 00:0357: 85 23                        sta     ADDR_S+0
   764 00:0359: 90 02                        bcc     $+4
   765 00:035B: E6 24                        inc     ADDR_S+1
   766                        
   767 00:035D: 20 xx xx                     jsr     SendACK                 ; Acknowledge block
   768 00:0360: E6 29                        inc     BLOCK                   ; Bump block number
   769 00:0362: 4C xx xx                     jmp     TransferWait
   770                        
   771                        TransferError;
   772 00:0365: 20 xx xx                     jsr     SendNAK                 ; Send a NAK
   773 00:0368: 4C xx xx                     jmp     TransferWait            ; And try again
   774                        
   775                        TransferDone:
   776 00:036B: 20 xx xx                     jsr     SendACK                 ; Acknowledge transmission
   777 00:036E: 4C xx xx                     jmp     NewCommand              ; Done
   778                        
   779                        SendACK:
   780 00:0371: A9 06                        lda     #ACK
   781 00:0373: 4C xx xx                     jmp     UartTx
   782                        
   783                        SendNAK:
   784 00:0376: A9 15                        lda     #NAK
   785 00:0378: 4C xx xx                     jmp     UartTx
   786                        
   787                        NotXModem:
   788                        
   789                        ;===============================================================================
   790                        ; ? - Help
   791                        ;-------------------------------------------------------------------------------
   792                        
   793 00:037B: C9 3F                        cmp     #'?'                    ; Help command?
   794 00:037D: D0 0B                        bne     NotHelp
   795                        
   796                                        long_i
  Tue Dec 29 2015 22:30                                                                                                    Page 17


+  796 00:037F: C2 10                        rep     #X_FLAG
+  796                                        longi   on
   797 00:0381: A2 xx xx                     ldx     #HELP                   ; Output help string
   798 00:0384: 20 xx xx                     jsr     TxStr
   799                                        longi   off
   800 00:0387: 4C xx xx                     jmp     NewCommand
   801                        NotHelp:
   802                        
   803                        ;-------------------------------------------------------------------------------
   804                        
   805                        ShowError:
   806                                        long_i
+  806 00:038A: C2 10                        rep     #X_FLAG
+  806                                        longi   on
   807 00:038C: A2 xx xx                     ldx     #ERROR                  ; Output error message
   808 00:038F: 20 xx xx                     jsr     TxStr
   809                                        longi   off
   810 00:0392: 4C xx xx                     jmp     NewCommand
   811                        
   812                        ;===============================================================================
   813                        ;-------------------------------------------------------------------------------
   814                        
   815                        ; Checks if an expendable ROM bank is currently selected. If the bank with the
   816                        ; WDC firmware is selected then warn and accept a new command.
   817                        
   818                        CheckSafe:
   819 00:0395: 20 xx xx                     jsr     RomCheck                ; WDC ROM selected?
   820 00:0398: F0 01                        beq     $+3
   821 00:039A: 60                           rts                             ; No, save to change
   822                        
   823 00:039B: 68                           pla                             ; Discard return address
   824 00:039C: 68                           pla
   825                                        long_i                          ; Complain about bank
+  825 00:039D: C2 10                        rep     #X_FLAG
+  825                                        longi   on
   826 00:039F: A2 xx xx                     ldx     #NOT_SAFE
   827 00:03A2: 20 xx xx                     jsr     TxStr
   828                                        longi   off
   829 00:03A5: 4C xx xx                     jmp     NewCommand              ; And start over
   830                        
   831                        ;===============================================================================
   832                        ; Byte and Word Parsing
   833                        ;-------------------------------------------------------------------------------
   834                        
   835                        ; Parse a hex byte from the command line and store it at the location indicated
   836                        ; by the X register.
   837                        
   838                        GetByte:
   839 00:03A8: 9E 00 00                     stz     0,x                     ; Set the target address
   840 00:03AB: 20 xx xx                     jsr     SkipSpaces              ; Skip to first real character
   841 00:03AE: 90 01                        bcc     $+3
   842 00:03B0: 60                           rts                             ; None found
   843 00:03B1: 20 xx xx                     jsr     IsHexDigit              ; Must have at least one digit
   844 00:03B4: 90 12                        bcc     ByteFail
   845 00:03B6: 20 xx xx                     jsr     AddDigit
   846 00:03B9: 20 xx xx                     jsr     NextChar
   847 00:03BC: B0 08                        bcs     ByteDone
   848 00:03BE: 20 xx xx                     jsr     IsHexDigit
  Tue Dec 29 2015 22:30                                                                                                    Page 18


   849 00:03C1: 90 03                        bcc     ByteDone
   850 00:03C3: 20 xx xx                     jsr     AddDigit
   851 00:03C6: 18           ByteDone:       clc
   852 00:03C7: 60                           rts
   853 00:03C8: 38           ByteFail:       sec
   854 00:03C9: 60                           rts
   855                        
   856                        ; Parse an address from the command line and store it at the location indicated
   857                        ; by the X register.
   858                        
   859                        GetAddr:
   860 00:03CA: 9E 00 00                     stz     0,x                     ; Set the target address
   861 00:03CD: 9E 01 00                     stz     1,x
   862 00:03D0: A5 22                        lda     BANK
   863 00:03D2: 9D 02 00                     sta     2,x
   864 00:03D5: 20 xx xx                     jsr     SkipSpaces              ; Skip to first real character
   865 00:03D8: 90 01                        bcc     $+3
   866 00:03DA: 60                           rts                             ; None found
   867                        
   868 00:03DB: 20 xx xx                     jsr     IsHexDigit              ; Must have at least one digit
   869 00:03DE: 90 2C                        bcc     AddrFail
   870 00:03E0: 20 xx xx                     jsr     AddDigit
   871 00:03E3: 20 xx xx                     jsr     NextChar
   872 00:03E6: B0 22                        bcs     AddrDone
   873 00:03E8: 20 xx xx                     jsr     IsHexDigit
   874 00:03EB: 90 1D                        bcc     AddrDone
   875 00:03ED: 20 xx xx                     jsr     AddDigit
   876 00:03F0: 20 xx xx                     jsr     NextChar
   877 00:03F3: B0 15                        bcs     AddrDone
   878 00:03F5: 20 xx xx                     jsr     IsHexDigit
   879 00:03F8: 90 10                        bcc     AddrDone
   880 00:03FA: 20 xx xx                     jsr     AddDigit
   881 00:03FD: 20 xx xx                     jsr     NextChar
   882 00:0400: B0 08                        bcs     AddrDone
   883 00:0402: 20 xx xx                     jsr     IsHexDigit
   884 00:0405: 90 03                        bcc     AddrDone
   885 00:0407: 20 xx xx                     jsr     AddDigit
   886 00:040A: 18           AddrDone:       clc                             ; Carry clear got an address
   887 00:040B: 60                           rts
   888 00:040C: 38           AddrFail:       sec                             ; Carry set -- failed.
   889 00:040D: 60                           rts
   890                        
   891                        ; Add a hex digit to the 16-bit value being build at at the location indicated
   892                        ; by X.
   893                        
   894                        AddDigit:
   895 00:040E: 38                           sec                             ; Convert ASCII to binary
   896 00:040F: E9 30                        sbc     #'0'
   897 00:0411: C9 0A                        cmp     #$0a
   898 00:0413: 90 02                        bcc     $+4
   899 00:0415: E9 07                        sbc     #7
   900                        
   901 00:0417: 1E 00 00                     asl     0,x                     ; Shift up one nybble
   902 00:041A: 3E 01 00                     rol     1,x
   903 00:041D: 1E 00 00                     asl     0,x
   904 00:0420: 3E 01 00                     rol     1,x
   905 00:0423: 1E 00 00                     asl     0,x
   906 00:0426: 3E 01 00                     rol     1,x
  Tue Dec 29 2015 22:30                                                                                                    Page 19


   907 00:0429: 1E 00 00                     asl     0,x
   908 00:042C: 3E 01 00                     rol     1,x
   909                        
   910 00:042F: 1D 00 00                     ora     0,x                     ; Merge in new digit
   911 00:0432: 9D 00 00                     sta     0,x                     ; .. and save
   912 00:0435: 60                           rts
   913                        
   914                        ;===============================================================================
   915                        ; Command Line Parsing and Building
   916                        ;-------------------------------------------------------------------------------
   917                        
   918                        ; Get the next character from the command buffer updating the position in X.
   919                        ; Set the carry if the end of the buffer is reached.
   920                        
   921                        NextChar:
   922 00:0436: C4 21                        cpy     BUFLEN                  ; Any characters left?
   923 00:0438: 90 01                        bcc     $+3
   924 00:043A: 60                           rts
   925 00:043B: B9 00 02                     lda     BUFFER,y
   926 00:043E: C8                           iny
   927 00:043F: 4C xx xx                     jmp     ToUpperCase
   928                        
   929                        ; Skip over any spaces until a non-space character or the end of the string
   930                        ; is reached.
   931                        
   932                        SkipSpaces:
   933 00:0442: 20 xx xx                     jsr     NextChar                ; Fetch next character
   934 00:0445: 90 01                        bcc     $+3                     ; Any left?
   935 00:0447: 60                           rts                             ; No
   936 00:0448: C9 20                        cmp     #' '                    ; Is it a space?
   937 00:044A: F0 F6                        beq     SkipSpaces              ; Yes, try again
   938 00:044C: 18                           clc
   939 00:044D: 60                           rts                             ; Done
   940                        
   941                        ; Clear the buffer and the add the command character in A.
   942                        
   943                        StartCommand:
   944 00:044E: 64 21                        stz     BUFLEN                  ; Clear the character count
   945                        
   946                        ; Append the character in A to the command being built updating the length.
   947                        
   948                        BuildCommand:
   949 00:0450: A4 21                        ldy     BUFLEN
   950 00:0452: E6 21                        inc     BUFLEN
   951 00:0454: 99 00 02                     sta     BUFFER,y
   952 00:0457: 60                           rts
   953                        
   954                        ; Convert the value in A into hex characters and append to the command buffer.
   955                        
   956                        BuildByte:
   957 00:0458: 48                           pha                             ; Save the value
   958 00:0459: 4A                           lsr     a                       ; Shift MS nybble down
   959 00:045A: 4A                           lsr     a
   960 00:045B: 4A                           lsr     a
   961 00:045C: 4A                           lsr     a
   962 00:045D: 20 xx xx                     jsr     HexToAscii              ; Convert to ASCII
   963 00:0460: 20 xx xx                     jsr     BuildCommand            ; .. and add to command
   964 00:0463: 68                           pla                             ; Pull LS nybble
  Tue Dec 29 2015 22:30                                                                                                    Page 20


   965 00:0464: 20 xx xx                     jsr     HexToAscii              ; Convert to ASCII
   966 00:0467: 4C xx xx                     jmp     BuildCommand            ; .. and add to command
   967                        
   968                        ;===============================================================================
   969                        ; Character Classification
   970                        ;-------------------------------------------------------------------------------
   971                        
   972                        ; If the character in MD_ACC is lower case then convert it to upper case.
   973                        
   974                        ToUpperCase:
   975 00:046A: 20 xx xx                     jsr     IsLowerCase             ; Test the character
   976 00:046D: 90 02                        bcc     $+4
   977 00:046F: E9 20                        sbc     #32                     ; Convert lower case
   978 00:0471: 18                           clc
   979 00:0472: 60                           rts                             ; Done
   980                        
   981                        ; Determine if the character in MD_ACC is a lower case letter. Set the carry if it
   982                        ; is, otherwise clear it.
   983                        
   984                                        longa   off
   985                        IsLowerCase:
   986 00:0473: C9 61                        cmp     #'a'                    ; Between a and z?
   987 00:0475: 90 06                        bcc     ClearCarry
   988 00:0477: C9 7B                        cmp     #'z'+1
   989 00:0479: B0 02                        bcs     ClearCarry
   990 00:047B: 38           SetCarry:       sec
   991 00:047C: 60                           rts
   992 00:047D: 18           ClearCarry:     clc
   993 00:047E: 60                           rts
   994                        
   995                        ; Determine if the character in MD_ACC is a hex character. Set the carry if it is,
   996                        ; otherwise clear it.
   997                        
   998                                        longa   off
   999                        IsHexDigit:
  1000 00:047F: C9 30                        cmp     #'0'                    ; Between 0 and 9?
  1001 00:0481: 90 FA                        bcc     ClearCarry
  1002 00:0483: C9 3A                        cmp     #'9'+1
  1003 00:0485: 90 F4                        bcc     SetCarry
  1004 00:0487: C9 41                        cmp     #'A'                    ; Between MD_ACC and F?
  1005 00:0489: 90 F2                        bcc     ClearCarry
  1006 00:048B: C9 47                        cmp     #'F'+1
  1007 00:048D: 90 EC                        bcc     SetCarry
  1008 00:048F: 80 EC                        bra     ClearCarry
  1009                        
  1010                        ; Determine if the character in MD_ACC is a printable character. Set the carry if it
  1011                        ; is, otherwise clear it.
  1012                        
  1013                                        longa   off
  1014                        IsPrintable:
  1015 00:0491: C9 20                        cmp     #' '
  1016 00:0493: 90 E8                        bcc     ClearCarry
  1017 00:0495: C9 7F                        cmp     #DEL
  1018 00:0497: 90 E2                        bcc     SetCarry
  1019 00:0499: 80 E2                        bra     ClearCarry
  1020                        
  1021                        ;===============================================================================
  1022                        ; Display Utilities
  Tue Dec 29 2015 22:30                                                                                                    Page 21


  1023                        ;-------------------------------------------------------------------------------
  1024                        
  1025                        ; Display the value in MD_ACC as two hexadecimal digits.
  1026                        
  1027                        TxHex2:
  1028 00:049B: 48                           pha                             ; Save the original byte
  1029 00:049C: 4A                           lsr     a                       ; Shift down hi nybble
  1030 00:049D: 4A                           lsr     a
  1031 00:049E: 4A                           lsr     a
  1032 00:049F: 4A                           lsr     a
  1033 00:04A0: 20 xx xx                     jsr     UartHex                 ; Display
  1034 00:04A3: 68                           pla                             ; Recover data byte
  1035                        
  1036                        ; Display the LSB of the value in MD_ACC as a hexadecimal digit using decimal
  1037                        ; arithmetic to do the conversion.
  1038                        
  1039                        UartHex:
  1040 00:04A4: 20 xx xx                     jsr     HexToAscii              ; Convert to ASCII
  1041 00:04A7: 4C xx xx                     jmp     UartTx                  ; And display
  1042                        
  1043                        ; Convert a LSB of the value in MD_ACC to a hexadecimal digit using decimal
  1044                        ; arithmetic.
  1045                        
  1046                        HexToAscii:
  1047 00:04AA: 29 0F                        and     #$0f                    ; Strip out lo nybble
  1048 00:04AC: F8                           sed                             ; Convert to ASCII
  1049 00:04AD: 18                           clc
  1050 00:04AE: 69 90                        adc     #$90
  1051 00:04B0: 69 40                        adc     #$40
  1052 00:04B2: D8                           cld
  1053 00:04B3: 60                           rts                             ; Done
  1054                        
  1055                        ; Display the string of characters starting a the memory location pointed to by
  1056                        ; X (16-bits).
  1057                        
  1058                                        .longa  off
  1059                                        .longi  on
  1060                        TxStr:
  1061 00:04B4: BD 00 00                     lda     0,x                     ; Fetch the next character
  1062 00:04B7: D0 01                        bne     $+3                     ; Return it end of string
  1063 00:04B9: 60                           rts
  1064 00:04BA: 20 xx xx                     jsr     UartTx                  ; Otherwise print it
  1065 00:04BD: E8                           inx                             ; Bump the pointer
  1066 00:04BE: 80 F4                        bra     TxStr                   ; And repeat
  1067                        
  1068                        ; Display a CR/LF control character sequence.
  1069                        
  1070                        TxCRLF:
  1071 00:04C0: 20 xx xx                     jsr     TxCR                    ; Transmit a CR
  1072 00:04C3: A9 0A                        lda     #LF                     ; Followed by a LF
  1073 00:04C5: 4C xx xx                     jmp     UartTx
  1074                        
  1075                        TxCR:
  1076 00:04C8: A9 0D                        lda     #CR                     ; Transmit a CR
  1077 00:04CA: 4C xx xx                     jmp     UartTx
  1078                        
  1079                        TxSpace:
  1080 00:04CD: A9 20                        lda     #' '                    ; Transmit a space
  Tue Dec 29 2015 22:30                                                                                                    Page 22


  1081 00:04CF: 4C xx xx                     jmp     UartTx
  1082                        
  1083                        ;===============================================================================
  1084                        ;-------------------------------------------------------------------------------
  1085                        
  1086                        ;
  1087                        
  1088                                        longa   off
  1089                                        longi   off
  1090                        TxCodeBytes:
  1091 00:04D2: A7 23                        lda     [ADDR_S]                ; Fetch the opcode
  1092 00:04D4: 20 xx xx                     jsr     OpcodeSize              ; and work out its size
  1093 00:04D7: AA                           tax
  1094 00:04D8: A0 00                        ldy     #0                      ; Clear byte count
  1095                        CodeLoop:
  1096 00:04DA: B7 23                        lda     [ADDR_S],Y              ; Fetch a byte of code
  1097 00:04DC: 20 xx xx                     jsr     TxHex2
  1098 00:04DF: 20 xx xx                     jsr     TxSpace
  1099 00:04E2: C8                           iny
  1100 00:04E3: CA                           dex
  1101 00:04E4: D0 F4                        bne     CodeLoop
  1102                        PadLoop:
  1103 00:04E6: C0 04                        cpy     #4                      ; Need to pad out?
  1104 00:04E8: D0 01                        bne     $+3
  1105 00:04EA: 60                           rts
  1106 00:04EB: 20 xx xx                     jsr     TxSpace
  1107 00:04EE: 20 xx xx                     jsr     TxSpace
  1108 00:04F1: 20 xx xx                     jsr     TxSpace
  1109 00:04F4: C8                           iny
  1110 00:04F5: 80 EF                        bra     PadLoop
  1111                        
  1112                        ;
  1113                        
  1114                                        longa   off
  1115                                        longi   off
  1116                        TxSymbolic:
  1117 00:04F7: A7 23                        lda     [ADDR_S]                ; Fetch opcode
  1118 00:04F9: 48                           pha
  1119 00:04FA: 20 xx xx                     jsr     TxOpcode
  1120 00:04FD: 68                           pla
  1121 00:04FE: 20 xx xx                     jsr     TxOperand
  1122 00:0501: 60                           rts
  1123                        
  1124                        ;
  1125                        
  1126                                        longa   off
  1127                                        longi   off
  1128                        TxOpcode:
  1129 00:0502: 08                           php                             ; Save register sizes
  1130 00:0503: AA                           tax                             ; Work out the mnemonic
  1131 00:0504: BD xx xx                     lda     OPCODES,x
  1132 00:0507: AA                           tax
  1133                                        long_a
+ 1133 00:0508: C2 20                        rep     #M_FLAG
+ 1133                                        longa   on
  1134 00:050A: BD xx xx                     lda     MNEMONICS,x
  1135                        
  1136 00:050D: 48                           pha                             ; Save last character
  Tue Dec 29 2015 22:30                                                                                                    Page 23


  1137 00:050E: 4A                           lsr     a                       ; Shift second down
  1138 00:050F: 4A                           lsr     a
  1139 00:0510: 4A                           lsr     a
  1140 00:0511: 4A                           lsr     a
  1141 00:0512: 4A                           lsr     a
  1142 00:0513: 48                           pha                             ; Save it
  1143 00:0514: 4A                           lsr     a                       ; Shift first down
  1144 00:0515: 4A                           lsr     a
  1145 00:0516: 4A                           lsr     a
  1146 00:0517: 4A                           lsr     a
  1147 00:0518: 4A                           lsr     a
  1148 00:0519: 20 xx xx                     jsr     ExpandMnem              ; Print first
  1149 00:051C: 68                           pla
  1150 00:051D: 20 xx xx                     jsr     ExpandMnem              ; .. second
  1151 00:0520: 68                           pla
  1152 00:0521: 20 xx xx                     jsr     ExpandMnem              ; .. and third
  1153 00:0524: 28                           plp
  1154 00:0525: 20 xx xx                     jsr     TxSpace
  1155 00:0528: 60                           rts
  1156                        
  1157                        ExpandMnem:
  1158 00:0529: 18                           clc
  1159 00:052A: 29 1F 00                     and     #$1f                    ; Expand letter code
  1160 00:052D: 69 40 00                     adc     #'@'
  1161 00:0530: 4C xx xx                     jmp     UartTx
  1162                        
  1163                        ;
  1164                        
  1165                                        longa   off
  1166                                        longi   off
  1167                        TxOperand:
  1168 00:0533: AA                           tax                             ; Work out addressing mode
  1169 00:0534: BD xx xx                     lda     MODES,x
  1170 00:0537: AA                           tax
  1171 00:0538: 7C xx xx                     jmp     (MODE_SHOW,x)
  1172                        
  1173                        MODE_SHOW:
  1174 00:053B: xx xx                        dw      TxAbsolute              ; a
  1175 00:053D: xx xx                        dw      TxAccumulator           ; A
  1176 00:053F: xx xx                        dw      TxAbsoluteX             ; a,x
  1177 00:0541: xx xx                        dw      TxAbsoluteY             ; a,y
  1178 00:0543: xx xx                        dw      TxLong                  ; al
  1179 00:0545: xx xx                        dw      TxLongX                 ; al,x
  1180 00:0547: xx xx                        dw      TxAbsoluteIndirect      ; (a)
  1181 00:0549: xx xx                        dw      TxAbsoluteXIndirect     ; (a,x)
  1182 00:054B: xx xx                        dw      TxDirect                ; d
  1183 00:054D: xx xx                        dw      TxStack                 ; d,s
  1184 00:054F: xx xx                        dw      TxDirectX               ; d,x
  1185 00:0551: xx xx                        dw      TxDirectY               ; d,y
  1186 00:0553: xx xx                        dw      TxDirectIndirect        ; (d)
  1187 00:0555: xx xx                        dw      TxDirectIndirectLong    ; [d]
  1188 00:0557: xx xx                        dw      TxStackIndirectY        ; (d,s),y
  1189 00:0559: xx xx                        dw      TxDirectXIndirect       ; (d,x)
  1190 00:055B: xx xx                        dw      TxDirectIndirectY       ; (d),y
  1191 00:055D: xx xx                        dw      TxDirectIndirectLongY   ; [d],y
  1192 00:055F: xx xx                        dw      TxImplied               ;
  1193 00:0561: xx xx                        dw      TxRelative              ; r
  1194 00:0563: xx xx                        dw      TxRelativeLong          ; rl
  Tue Dec 29 2015 22:30                                                                                                    Page 24


  1195 00:0565: xx xx                        dw      TxImplied               ; xyc
  1196 00:0567: xx xx                        dw      TxImmediateM            ; # (A & M)
  1197 00:0569: xx xx                        dw      TxImmediateByte         ; # (BRK/COP/WDM)
  1198 00:056B: xx xx                        dw      TxImmediateX            ; # (X or Y)
  1199                        
  1200                        
  1201                        TxAccumulator:
  1202 00:056D: A9 41                        lda     #'A'
  1203 00:056F: 4C xx xx                     jmp     UartTx
  1204                        
  1205                        TxImmediateM:
  1206 00:0572: A9 20                        lda     #M_FLAG
  1207 00:0574: 24 20                        bit     FLAGS
  1208 00:0576: F0 12                        beq     TxImmediateWord
  1209 00:0578: 80 09                        bra     TxImmediateByte
  1210                        
  1211                        TxImmediateX:
  1212 00:057A: A9 10                        lda     #X_FLAG
  1213 00:057C: 24 20                        bit     FLAGS
  1214 00:057E: F0 0A                        beq     TxImmediateWord
  1215 00:0580: 80 01                        bra     TxImmediateByte
  1216                        
  1217                        TxImplied:
  1218 00:0582: 60                           rts
  1219                        
  1220                        TxImmediateByte:
  1221 00:0583: A9 23                        lda     #'#'
  1222 00:0585: 20 xx xx                     jsr     UartTx
  1223 00:0588: 80 14                        bra     TxDirect
  1224                        
  1225                        TxImmediateWord:
  1226 00:058A: A9 23                        lda     #'#'
  1227 00:058C: 20 xx xx                     jsr     UartTx
  1228 00:058F: 80 33                        bra     TxAbsolute
  1229                        
  1230                        TxStack:
  1231 00:0591: 20 xx xx                     jsr     TxDirect
  1232 00:0594: A9 2C                        lda     #','
  1233 00:0596: 20 xx xx                     jsr     UartTx
  1234 00:0599: A9 53                        lda     #'S'
  1235 00:059B: 4C xx xx                     jmp     UartTx
  1236                        
  1237                        TxDirect:
  1238 00:059E: A9 24                        lda     #'$'
  1239 00:05A0: 20 xx xx                     jsr     UartTx
  1240 00:05A3: A0 01                        ldy     #1
  1241 00:05A5: B7 23                        lda     [ADDR_S],Y
  1242 00:05A7: 4C xx xx                     jmp     TxHex2
  1243                        
  1244                        TxDirectX:
  1245 00:05AA: 20 xx xx                     jsr     TxDirect
  1246 00:05AD: A9 2C        TxX:            lda     #','
  1247 00:05AF: 20 xx xx                     jsr     UartTx
  1248 00:05B2: A9 58                        lda     #'X'
  1249 00:05B4: 4C xx xx                     jmp     UartTx
  1250                        
  1251                        TxDirectY:
  1252 00:05B7: 20 xx xx                     jsr     TxDirect
  Tue Dec 29 2015 22:30                                                                                                    Page 25


  1253 00:05BA: A9 2C        TxY:            lda     #','
  1254 00:05BC: 20 xx xx                     jsr     UartTx
  1255 00:05BF: A9 59                        lda     #'Y'
  1256 00:05C1: 4C xx xx                     jmp     UartTx
  1257                        
  1258                        TxAbsolute:
  1259 00:05C4: A9 24                        lda     #'$'
  1260 00:05C6: 20 xx xx                     jsr     UartTx
  1261 00:05C9: A0 02                        ldy     #2
  1262 00:05CB: B7 23                        lda     [ADDR_S],Y
  1263 00:05CD: 20 xx xx                     jsr     TxHex2
  1264 00:05D0: 88                           dey
  1265 00:05D1: B7 23                        lda     [ADDR_S],Y
  1266 00:05D3: 4C xx xx                     jmp     TxHex2
  1267                        
  1268                        TxAbsoluteX:
  1269 00:05D6: 20 xx xx                     jsr     TxAbsolute
  1270 00:05D9: 80 D2                        bra     TxX
  1271                        
  1272                        TxAbsoluteY:
  1273 00:05DB: 20 xx xx                     jsr     TxAbsolute
  1274 00:05DE: 80 DA                        bra     TxY
  1275                        
  1276                        TxLong:
  1277 00:05E0: A9 24                        lda     #'$'
  1278 00:05E2: 20 xx xx                     jsr     UartTx
  1279 00:05E5: A0 03                        ldy     #3
  1280 00:05E7: B7 23                        lda     [ADDR_S],Y
  1281 00:05E9: 20 xx xx                     jsr     TxHex2
  1282 00:05EC: A9 3A                        lda     #':'
  1283 00:05EE: 20 xx xx                     jsr     UartTx
  1284 00:05F1: 88                           dey
  1285 00:05F2: B7 23                        lda     [ADDR_S],Y
  1286 00:05F4: 20 xx xx                     jsr     TxHex2
  1287 00:05F7: 88                           dey
  1288 00:05F8: B7 23                        lda     [ADDR_S],Y
  1289 00:05FA: 4C xx xx                     jmp     TxHex2
  1290                        
  1291                        TxLongX:
  1292 00:05FD: 20 xx xx                     jsr     TxLong
  1293 00:0600: 80 AB                        bra     TxX
  1294                        
  1295                        TxAbsoluteIndirect:
  1296 00:0602: A9 28                        lda     #'('
  1297 00:0604: 20 xx xx                     jsr     UartTx
  1298 00:0607: 20 xx xx                     jsr     TxAbsolute
  1299 00:060A: A9 29                        lda     #')'
  1300 00:060C: 4C xx xx                     jmp     UartTx
  1301                        
  1302                        TxAbsoluteXIndirect:
  1303 00:060F: A9 28                        lda     #'('
  1304 00:0611: 20 xx xx                     jsr     UartTx
  1305 00:0614: 20 xx xx                     jsr     TxAbsoluteX
  1306 00:0617: A9 29                        lda     #')'
  1307 00:0619: 4C xx xx                     jmp     UartTx
  1308                        
  1309                        TxDirectIndirect:
  1310 00:061C: A9 28                        lda     #'('
  Tue Dec 29 2015 22:30                                                                                                    Page 26


  1311 00:061E: 20 xx xx                     jsr     UartTx
  1312 00:0621: 20 xx xx                     jsr     TxDirect
  1313 00:0624: A9 29                        lda     #')'
  1314 00:0626: 4C xx xx                     jmp     UartTx
  1315                        
  1316                        TxDirectXIndirect:
  1317 00:0629: A9 28                        lda     #'('
  1318 00:062B: 20 xx xx                     jsr     UartTx
  1319 00:062E: 20 xx xx                     jsr     TxDirectX
  1320 00:0631: A9 29                        lda     #')'
  1321 00:0633: 4C xx xx                     jmp     UartTx
  1322                        
  1323                        TxDirectIndirectY:
  1324 00:0636: A9 28                        lda     #'('
  1325 00:0638: 20 xx xx                     jsr     UartTx
  1326 00:063B: 20 xx xx                     jsr     TxDirect
  1327 00:063E: A9 29                        lda     #')'
  1328 00:0640: 20 xx xx                     jsr     UartTx
  1329 00:0643: 4C xx xx                     jmp     TxY
  1330                        
  1331                        TxDirectIndirectLong:
  1332 00:0646: A9 5B                        lda     #'['
  1333 00:0648: 20 xx xx                     jsr     UartTx
  1334 00:064B: 20 xx xx                     jsr     TxDirect
  1335 00:064E: A9 5D                        lda     #']'
  1336 00:0650: 4C xx xx                     jmp     UartTx
  1337                        
  1338                        TxDirectIndirectLongY:
  1339 00:0653: 20 xx xx                     jsr     TxDirectIndirectLong
  1340 00:0656: 4C xx xx                     jmp     TxY
  1341                        
  1342                        TxStackIndirectY:
  1343 00:0659: A9 28                        lda     #'('
  1344 00:065B: 20 xx xx                     jsr     UartTx
  1345 00:065E: 20 xx xx                     jsr     TxStack
  1346 00:0661: A9 29                        lda     #')'
  1347 00:0663: 20 xx xx                     jsr     UartTx
  1348 00:0666: 4C xx xx                     jmp     TxY
  1349                        
  1350                        TxRelative:
  1351 00:0669: A6 24                        ldx     ADDR_S+1                ; Work out next PC
  1352 00:066B: A5 23                        lda     ADDR_S+0
  1353 00:066D: 18                           clc
  1354 00:066E: 69 02                        adc     #2
  1355 00:0670: 90 01                        bcc     $+3
  1356 00:0672: E8                           inx
  1357                        
  1358 00:0673: 48                           pha                             ; Add relative offset
  1359 00:0674: A0 01                        ldy     #1
  1360 00:0676: B7 23                        lda     [ADDR_S],y
  1361 00:0678: 10 01                        bpl     $+3
  1362 00:067A: CA                           dex
  1363 00:067B: 18                           clc
  1364 00:067C: 63 01                        adc     1,s
  1365 00:067E: 83 01                        sta     1,s
  1366 00:0680: 90 01                        bcc     $+3
  1367 00:0682: E8                           inx
  1368 00:0683: 80 15                        bra     TxAddr
  Tue Dec 29 2015 22:30                                                                                                    Page 27


  1369                        
  1370                        TxRelativeLong:
  1371 00:0685: A6 24                        ldx     ADDR_S+1                ; Work out next PC
  1372 00:0687: A5 23                        lda     ADDR_S+0
  1373 00:0689: 18                           clc
  1374 00:068A: 69 03                        adc     #3
  1375 00:068C: 90 01                        bcc     $+3
  1376 00:068E: E8                           inx
  1377                        
  1378 00:068F: 18                           clc                             ; Add relative offset
  1379 00:0690: A0 01                        ldy     #1
  1380 00:0692: 77 23                        adc     [ADDR_S],y
  1381 00:0694: 48                           pha
  1382 00:0695: C8                           iny
  1383 00:0696: 8A                           txa
  1384 00:0697: 77 23                        adc     [ADDR_S],Y
  1385 00:0699: AA                           tax
  1386                        
  1387                        TxAddr:
  1388 00:069A: A9 24                        lda     #'$'                    ; Print address
  1389 00:069C: 20 xx xx                     jsr     UartTx
  1390 00:069F: 8A                           txa
  1391 00:06A0: 20 xx xx                     jsr     TxHex2
  1392 00:06A3: 68                           pla
  1393 00:06A4: 4C xx xx                     jmp     TxHex2
  1394                        
  1395                        ;  Returns the size of the opcode in A given the current flag settings.
  1396                        
  1397                                        longa   off
  1398                                        longi   off
  1399                        OpcodeSize:
  1400 00:06A7: AA                           tax                             ; Work out addressing mode
  1401 00:06A8: BD xx xx                     lda     MODES,x
  1402 00:06AB: AA                           tax
  1403 00:06AC: 7C xx xx                     jmp     (MODE_SIZE,x)
  1404                        
  1405                        MODE_SIZE:
  1406 00:06AF: xx xx                        dw      Size3                   ; a
  1407 00:06B1: xx xx                        dw      Size1                   ; A
  1408 00:06B3: xx xx                        dw      Size3                   ; a,x
  1409 00:06B5: xx xx                        dw      Size3                   ; a,y
  1410 00:06B7: xx xx                        dw      Size4                   ; al
  1411 00:06B9: xx xx                        dw      Size4                   ; al,x
  1412 00:06BB: xx xx                        dw      Size3                   ; (a)
  1413 00:06BD: xx xx                        dw      Size3                   ; (a,x)
  1414 00:06BF: xx xx                        dw      Size2                   ; d
  1415 00:06C1: xx xx                        dw      Size2                   ; d,s
  1416 00:06C3: xx xx                        dw      Size2                   ; d,x
  1417 00:06C5: xx xx                        dw      Size2                   ; d,y
  1418 00:06C7: xx xx                        dw      Size2                   ; (d)
  1419 00:06C9: xx xx                        dw      Size2                   ; [d]
  1420 00:06CB: xx xx                        dw      Size2                   ; (d,s),y
  1421 00:06CD: xx xx                        dw      Size2                   ; (d,x)
  1422 00:06CF: xx xx                        dw      Size2                   ; (d),y
  1423 00:06D1: xx xx                        dw      Size2                   ; [d],y
  1424 00:06D3: xx xx                        dw      Size1                   ;
  1425 00:06D5: xx xx                        dw      Size2                   ; r
  1426 00:06D7: xx xx                        dw      Size3                   ; rl
  Tue Dec 29 2015 22:30                                                                                                    Page 28


  1427 00:06D9: xx xx                        dw      Size3                   ; xyc
  1428 00:06DB: xx xx                        dw      TestM                   ; # (A & M)
  1429 00:06DD: xx xx                        dw      Size2                   ; # (BRK/COP/WDM)
  1430 00:06DF: xx xx                        dw      TestX                   ; # (X or Y)
  1431                        
  1432                        TestM
  1433 00:06E1: A9 20                        lda     #M_FLAG                 ; Is M bit set?
  1434 00:06E3: 25 20                        and     FLAGS
  1435 00:06E5: F0 10                        beq     Size3                   ; No, word
  1436 00:06E7: 80 0B                        bra     Size2                   ; else byte
  1437                        
  1438                        TestX
  1439 00:06E9: A9 10                        lda     #X_FLAG                 ; Is X bit set?
  1440 00:06EB: 25 20                        and     FLAGS
  1441 00:06ED: F0 08                        beq     Size3                   ; No, word
  1442 00:06EF: 80 03                        bra     Size2                   ; else byte
  1443                        
  1444 00:06F1: A9 01        Size1:          lda     #1
  1445 00:06F3: 60                           rts
  1446 00:06F4: A9 02        Size2:          lda     #2
  1447 00:06F6: 60                           rts
  1448 00:06F7: A9 03        Size3           lda     #3
  1449 00:06F9: 60                           rts
  1450 00:06FA: A9 04        Size4:          lda     #4
  1451 00:06FC: 60                           rts
  1452                        
  1453                        OPCODES:
  1454 00:06FD: 16 52 28 52                  db      OP_BRK,OP_ORA,OP_COP,OP_ORA     ; 00
  1455 00:0701: A0 52 04 52                  db      OP_TSB,OP_ORA,OP_ASL,OP_ORA
  1456 00:0705: 62 52 04 5E                  db      OP_PHP,OP_ORA,OP_ASL,OP_PHD
  1457 00:0709: A0 52 04 52                  db      OP_TSB,OP_ORA,OP_ASL,OP_ORA
  1458 00:070D: 12 52 52 52                  db      OP_BPL,OP_ORA,OP_ORA,OP_ORA     ; 10
  1459 00:0711: 9E 52 04 52                  db      OP_TRB,OP_ORA,OP_ASL,OP_ORA
  1460 00:0715: 1E 52 36 9A                  db      OP_CLC,OP_ORA,OP_INC,OP_TCS
  1461 00:0719: 9E 52 04 52                  db      OP_TRB,OP_ORA,OP_ASL,OP_ORA
  1462 00:071D: 42 02 40 02                  db      OP_JSR,OP_AND,OP_JSL,OP_AND     ; 20
  1463 00:0721: 0C 02 76 02                  db      OP_BIT,OP_AND,OP_ROL,OP_AND
  1464 00:0725: 6E 02 76 6C                  db      OP_PLP,OP_AND,OP_ROL,OP_PLD
  1465 00:0729: 0C 02 76 02                  db      OP_BIT,OP_AND,OP_ROL,OP_AND
  1466 00:072D: 0E 02 02 02                  db      OP_BMI,OP_AND,OP_AND,OP_AND     ; 30
  1467 00:0731: 0C 02 76 02                  db      OP_BIT,OP_AND,OP_ROL,OP_AND
  1468 00:0735: 82 02 2E A2                  db      OP_SEC,OP_AND,OP_DEC,OP_TSC
  1469 00:0739: 0C 02 76 02                  db      OP_BIT,OP_AND,OP_ROL,OP_AND
  1470 00:073D: 7A 34 B2 34                  db      OP_RTI,OP_EOR,OP_WDM,OP_EOR     ; 40
  1471 00:0741: 4E 34 4A 34                  db      OP_MVP,OP_EOR,OP_LSR,OP_EOR
  1472 00:0745: 5A 34 4A 60                  db      OP_PHA,OP_EOR,OP_LSR,OP_PHK
  1473 00:0749: 3E 34 4A 34                  db      OP_JMP,OP_EOR,OP_LSR,OP_EOR
  1474 00:074D: 1A 34 34 34                  db      OP_BVC,OP_EOR,OP_EOR,OP_EOR     ; 50
  1475 00:0751: 4C 34 4A 34                  db      OP_MVN,OP_EOR,OP_LSR,OP_EOR
  1476 00:0755: 22 34 66 98                  db      OP_CLI,OP_EOR,OP_PHY,OP_TCD
  1477 00:0759: 3E 34 4A 34                  db      OP_JMP,OP_EOR,OP_LSR,OP_EOR
  1478 00:075D: 7E 00 58 00                  db      OP_RTS,OP_ADC,OP_PER,OP_ADC     ; 60
  1479 00:0761: 92 00 78 00                  db      OP_STZ,OP_ADC,OP_ROR,OP_ADC
  1480 00:0765: 68 00 78 7C                  db      OP_PLA,OP_ADC,OP_ROR,OP_RTL
  1481 00:0769: 3E 00 78 00                  db      OP_JMP,OP_ADC,OP_ROR,OP_ADC
  1482 00:076D: 1C 00 00 00                  db      OP_BVS,OP_ADC,OP_ADC,OP_ADC     ; 70
  1483 00:0771: 92 00 78 00                  db      OP_STZ,OP_ADC,OP_ROR,OP_ADC
  1484 00:0775: 86 00 72 9C                  db      OP_SEI,OP_ADC,OP_PLY,OP_TDC
  Tue Dec 29 2015 22:30                                                                                                    Page 29


  1485 00:0779: 3E 00 78 00                  db      OP_JMP,OP_ADC,OP_ROR,OP_ADC
  1486 00:077D: 14 8A 18 8A                  db      OP_BRA,OP_STA,OP_BRL,OP_STA     ; 80
  1487 00:0781: 90 8A 8E 8A                  db      OP_STY,OP_STA,OP_STX,OP_STA
  1488 00:0785: 32 0C A6 5C                  db      OP_DEY,OP_BIT,OP_TXA,OP_PHB
  1489 00:0789: 90 8A 8E 8A                  db      OP_STY,OP_STA,OP_STX,OP_STA
  1490 00:078D: 06 8A 8A 8A                  db      OP_BCC,OP_STA,OP_STA,OP_STA     ; 90
  1491 00:0791: 90 8A 8E 8A                  db      OP_STY,OP_STA,OP_STX,OP_STA
  1492 00:0795: AC 8A A8 AA                  db      OP_TYA,OP_STA,OP_TXS,OP_TXY
  1493 00:0799: 92 8A 92 8A                  db      OP_STZ,OP_STA,OP_STZ,OP_STA
  1494 00:079D: 48 44 46 44                  db      OP_LDY,OP_LDA,OP_LDX,OP_LDA     ; A0
  1495 00:07A1: 48 44 46 44                  db      OP_LDY,OP_LDA,OP_LDX,OP_LDA
  1496 00:07A5: 96 44 94 6A                  db      OP_TAY,OP_LDA,OP_TAX,OP_PLB
  1497 00:07A9: 48 44 46 44                  db      OP_LDY,OP_LDA,OP_LDX,OP_LDA
  1498 00:07AD: 08 44 44 48                  db      OP_BCS,OP_LDA,OP_LDA,OP_LDY     ; B0
  1499 00:07B1: 44 48 46 44                  db      OP_LDA,OP_LDY,OP_LDX,OP_LDA
  1500 00:07B5: 24 44 A4 AE                  db      OP_CLV,OP_LDA,OP_TSX,OP_TYX
  1501 00:07B9: 48 44 46 44                  db      OP_LDY,OP_LDA,OP_LDX,OP_LDA
  1502 00:07BD: 2C 26 74 26                  db      OP_CPY,OP_CMP,OP_REP,OP_CMP     ; C0
  1503 00:07C1: 2C 26 2E 26                  db      OP_CPY,OP_CMP,OP_DEC,OP_CMP
  1504 00:07C5: 3A 26 30 B0                  db      OP_INY,OP_CMP,OP_DEX,OP_WAI
  1505 00:07C9: 2C 26 2E 26                  db      OP_CPY,OP_CMP,OP_DEC,OP_CMP
  1506 00:07CD: 10 26 26 26                  db      OP_BNE,OP_CMP,OP_CMP,OP_CMP     ; D0
  1507 00:07D1: 56 26 2E 26                  db      OP_PEI,OP_CMP,OP_DEC,OP_CMP
  1508 00:07D5: 20 26 64 8C                  db      OP_CLD,OP_CMP,OP_PHX,OP_STP
  1509 00:07D9: 3C 26 2E 26                  db      OP_JML,OP_CMP,OP_DEC,OP_CMP
  1510 00:07DD: 2A 80 88 80                  db      OP_CPX,OP_SBC,OP_SEP,OP_SBC     ; E0
  1511 00:07E1: 2A 80 36 80                  db      OP_CPX,OP_SBC,OP_INC,OP_SBC
  1512 00:07E5: 38 80 50 B4                  db      OP_INX,OP_SBC,OP_NOP,OP_XBA
  1513 00:07E9: 2A 80 36 80                  db      OP_CPX,OP_SBC,OP_INC,OP_SBC
  1514 00:07ED: 0A 80 80 80                  db      OP_BEQ,OP_SBC,OP_SBC,OP_SBC     ; F0
  1515 00:07F1: 54 80 36 80                  db      OP_PEA,OP_SBC,OP_INC,OP_SBC
  1516 00:07F5: 84 80 70 B6                  db      OP_SED,OP_SBC,OP_PLX,OP_XCE
  1517 00:07F9: 42 80 36 80                  db      OP_JSR,OP_SBC,OP_INC,OP_SBC
  1518                        
  1519                        MODES:
  1520 00:07FD: 2E 1E 2E 12                  db      MD_INT,MD_DIX,MD_INT,MD_STK     ; 00
  1521 00:0801: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1522 00:0805: 24 2C 02 24                  db      MD_IMP,MD_IMM,MD_ACC,MD_IMP
  1523 00:0809: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1524 00:080D: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 10
  1525 00:0811: 10 14 14 22                  db      MD_DPG,MD_DPX,MD_DPX,MD_DLY
  1526 00:0815: 24 06 02 24                  db      MD_IMP,MD_ABY,MD_ACC,MD_IMP
  1527 00:0819: 00 04 04 0A                  db      MD_ABS,MD_ABX,MD_ABX,MD_ALX
  1528 00:081D: 00 1E 08 12                  db      MD_ABS,MD_DIX,MD_ALG,MD_STK     ; 20
  1529 00:0821: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1530 00:0825: 24 2C 02 24                  db      MD_IMP,MD_IMM,MD_ACC,MD_IMP
  1531 00:0829: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1532 00:082D: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 30
  1533 00:0831: 14 14 14 22                  db      MD_DPX,MD_DPX,MD_DPX,MD_DLY
  1534 00:0835: 24 06 02 24                  db      MD_IMP,MD_ABY,MD_ACC,MD_IMP
  1535 00:0839: 04 04 04 0A                  db      MD_ABX,MD_ABX,MD_ABX,MD_ALX
  1536 00:083D: 24 1E 2E 12                  db      MD_IMP,MD_DIX,MD_INT,MD_STK     ; 40
  1537 00:0841: 2A 10 10 1A                  db      MD_MOV,MD_DPG,MD_DPG,MD_DLI
  1538 00:0845: 24 2C 02 24                  db      MD_IMP,MD_IMM,MD_ACC,MD_IMP
  1539 00:0849: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1540 00:084D: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 50
  1541 00:0851: 2A 14 14 22                  db      MD_MOV,MD_DPX,MD_DPX,MD_DLY
  1542 00:0855: 24 06 24 24                  db      MD_IMP,MD_ABY,MD_IMP,MD_IMP
  Tue Dec 29 2015 22:30                                                                                                    Page 30


  1543 00:0859: 08 04 04 0A                  db      MD_ALG,MD_ABX,MD_ABX,MD_ALX
  1544 00:085D: 24 1E 24 12                  db      MD_IMP,MD_DIX,MD_IMP,MD_STK     ; 60
  1545 00:0861: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1546 00:0865: 24 2C 02 24                  db      MD_IMP,MD_IMM,MD_ACC,MD_IMP
  1547 00:0869: 0C 00 00 08                  db      MD_AIN,MD_ABS,MD_ABS,MD_ALG
  1548 00:086D: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 70
  1549 00:0871: 14 14 14 22                  db      MD_DPX,MD_DPX,MD_DPX,MD_DLY
  1550 00:0875: 24 06 24 24                  db      MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1551 00:0879: 0E 04 04 0A                  db      MD_AIX,MD_ABX,MD_ABX,MD_ALX
  1552 00:087D: 26 1E 28 12                  db      MD_REL,MD_DIX,MD_RLG,MD_STK     ; 80
  1553 00:0881: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1554 00:0885: 24 2C 24 24                  db      MD_IMP,MD_IMM,MD_IMP,MD_IMP
  1555 00:0889: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1556 00:088D: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; 90
  1557 00:0891: 14 14 16 22                  db      MD_DPX,MD_DPX,MD_DPY,MD_DLY
  1558 00:0895: 24 06 24 24                  db      MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1559 00:0899: 00 04 04 0A                  db      MD_ABS,MD_ABX,MD_ABX,MD_ALX
  1560 00:089D: 30 1E 30 12                  db      MD_IMX,MD_DIX,MD_IMX,MD_STK     ; A0
  1561 00:08A1: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1562 00:08A5: 24 2C 24 24                  db      MD_IMP,MD_IMM,MD_IMP,MD_IMP
  1563 00:08A9: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1564 00:08AD: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; B0
  1565 00:08B1: 14 14 16 22                  db      MD_DPX,MD_DPX,MD_DPY,MD_DLY
  1566 00:08B5: 24 06 24 24                  db      MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1567 00:08B9: 04 04 06 0A                  db      MD_ABX,MD_ABX,MD_ABY,MD_ALX
  1568 00:08BD: 30 1E 2E 12                  db      MD_IMX,MD_DIX,MD_INT,MD_STK     ; C0
  1569 00:08C1: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1570 00:08C5: 24 2C 24 24                  db      MD_IMP,MD_IMM,MD_IMP,MD_IMP
  1571 00:08C9: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1572 00:08CD: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; D0
  1573 00:08D1: 24 14 14 22                  db      MD_IMP,MD_DPX,MD_DPX,MD_DLY
  1574 00:08D5: 24 06 24 24                  db      MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1575 00:08D9: 0C 04 04 0A                  db      MD_AIN,MD_ABX,MD_ABX,MD_ALX
  1576 00:08DD: 30 1E 2E 12                  db      MD_IMX,MD_DIX,MD_INT,MD_STK     ; E0
  1577 00:08E1: 10 10 10 1A                  db      MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1578 00:08E5: 24 2C 24 24                  db      MD_IMP,MD_IMM,MD_IMP,MD_IMP
  1579 00:08E9: 00 00 00 08                  db      MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1580 00:08ED: 26 20 18 1C                  db      MD_REL,MD_DIY,MD_DIN,MD_SKY     ; F0
  1581 00:08F1: 24 14 14 22                  db      MD_IMP,MD_DPX,MD_DPX,MD_DLY
  1582 00:08F5: 24 06 24 24                  db      MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1583 00:08F9: 0E 04 04 0A                  db      MD_AIX,MD_ABX,MD_ABX,MD_ALX
  1584                        
  1585                        MNEMONICS:
  1586                                        MNEM    'A','D','C'
+ 1586 00:08FD: 83 04                        dw      (((('A'-'@')<<5)|('D'-'@'))<<5)|('C'-'@')
  1587                                        MNEM    'A','N','D'
+ 1587 00:08FF: C4 05                        dw      (((('A'-'@')<<5)|('N'-'@'))<<5)|('D'-'@')
  1588                                        MNEM    'A','S','L'
+ 1588 00:0901: 6C 06                        dw      (((('A'-'@')<<5)|('S'-'@'))<<5)|('L'-'@')
  1589                                        MNEM    'B','C','C'
+ 1589 00:0903: 63 08                        dw      (((('B'-'@')<<5)|('C'-'@'))<<5)|('C'-'@')
  1590                                        MNEM    'B','C','S'
+ 1590 00:0905: 73 08                        dw      (((('B'-'@')<<5)|('C'-'@'))<<5)|('S'-'@')
  1591                                        MNEM    'B','E','Q'
+ 1591 00:0907: B1 08                        dw      (((('B'-'@')<<5)|('E'-'@'))<<5)|('Q'-'@')
  1592                                        MNEM    'B','I','T'
+ 1592 00:0909: 34 09                        dw      (((('B'-'@')<<5)|('I'-'@'))<<5)|('T'-'@')
  1593                                        MNEM    'B','M','I'
  Tue Dec 29 2015 22:30                                                                                                    Page 31


+ 1593 00:090B: A9 09                        dw      (((('B'-'@')<<5)|('M'-'@'))<<5)|('I'-'@')
  1594                                        MNEM    'B','N','E'
+ 1594 00:090D: C5 09                        dw      (((('B'-'@')<<5)|('N'-'@'))<<5)|('E'-'@')
  1595                                        MNEM    'B','P','L'
+ 1595 00:090F: 0C 0A                        dw      (((('B'-'@')<<5)|('P'-'@'))<<5)|('L'-'@')
  1596                                        MNEM    'B','R','A'
+ 1596 00:0911: 41 0A                        dw      (((('B'-'@')<<5)|('R'-'@'))<<5)|('A'-'@')
  1597                                        MNEM    'B','R','K'
+ 1597 00:0913: 4B 0A                        dw      (((('B'-'@')<<5)|('R'-'@'))<<5)|('K'-'@')
  1598                                        MNEM    'B','R','L'
+ 1598 00:0915: 4C 0A                        dw      (((('B'-'@')<<5)|('R'-'@'))<<5)|('L'-'@')
  1599                                        MNEM    'B','V','C'
+ 1599 00:0917: C3 0A                        dw      (((('B'-'@')<<5)|('V'-'@'))<<5)|('C'-'@')
  1600                                        MNEM    'B','V','S'
+ 1600 00:0919: D3 0A                        dw      (((('B'-'@')<<5)|('V'-'@'))<<5)|('S'-'@')
  1601                                        MNEM    'C','L','C'
+ 1601 00:091B: 83 0D                        dw      (((('C'-'@')<<5)|('L'-'@'))<<5)|('C'-'@')
  1602                                        MNEM    'C','L','D'
+ 1602 00:091D: 84 0D                        dw      (((('C'-'@')<<5)|('L'-'@'))<<5)|('D'-'@')
  1603                                        MNEM    'C','L','I'
+ 1603 00:091F: 89 0D                        dw      (((('C'-'@')<<5)|('L'-'@'))<<5)|('I'-'@')
  1604                                        MNEM    'C','L','V'
+ 1604 00:0921: 96 0D                        dw      (((('C'-'@')<<5)|('L'-'@'))<<5)|('V'-'@')
  1605                                        MNEM    'C','M','P'
+ 1605 00:0923: B0 0D                        dw      (((('C'-'@')<<5)|('M'-'@'))<<5)|('P'-'@')
  1606                                        MNEM    'C','O','P'
+ 1606 00:0925: F0 0D                        dw      (((('C'-'@')<<5)|('O'-'@'))<<5)|('P'-'@')
  1607                                        MNEM    'C','P','X'
+ 1607 00:0927: 18 0E                        dw      (((('C'-'@')<<5)|('P'-'@'))<<5)|('X'-'@')
  1608                                        MNEM    'C','P','Y'
+ 1608 00:0929: 19 0E                        dw      (((('C'-'@')<<5)|('P'-'@'))<<5)|('Y'-'@')
  1609                                        MNEM    'D','E','C'
+ 1609 00:092B: A3 10                        dw      (((('D'-'@')<<5)|('E'-'@'))<<5)|('C'-'@')
  1610                                        MNEM    'D','E','X'
+ 1610 00:092D: B8 10                        dw      (((('D'-'@')<<5)|('E'-'@'))<<5)|('X'-'@')
  1611                                        MNEM    'D','E','Y'
+ 1611 00:092F: B9 10                        dw      (((('D'-'@')<<5)|('E'-'@'))<<5)|('Y'-'@')
  1612                                        MNEM    'E','O','R'
+ 1612 00:0931: F2 15                        dw      (((('E'-'@')<<5)|('O'-'@'))<<5)|('R'-'@')
  1613                                        MNEM    'I','N','C'
+ 1613 00:0933: C3 25                        dw      (((('I'-'@')<<5)|('N'-'@'))<<5)|('C'-'@')
  1614                                        MNEM    'I','N','X'
+ 1614 00:0935: D8 25                        dw      (((('I'-'@')<<5)|('N'-'@'))<<5)|('X'-'@')
  1615                                        MNEM    'I','N','Y'
+ 1615 00:0937: D9 25                        dw      (((('I'-'@')<<5)|('N'-'@'))<<5)|('Y'-'@')
  1616                                        MNEM    'J','M','L'
+ 1616 00:0939: AC 29                        dw      (((('J'-'@')<<5)|('M'-'@'))<<5)|('L'-'@')
  1617                                        MNEM    'J','M','P'
+ 1617 00:093B: B0 29                        dw      (((('J'-'@')<<5)|('M'-'@'))<<5)|('P'-'@')
  1618                                        MNEM    'J','S','L'
+ 1618 00:093D: 6C 2A                        dw      (((('J'-'@')<<5)|('S'-'@'))<<5)|('L'-'@')
  1619                                        MNEM    'J','S','R'
+ 1619 00:093F: 72 2A                        dw      (((('J'-'@')<<5)|('S'-'@'))<<5)|('R'-'@')
  1620                                        MNEM    'L','D','A'
+ 1620 00:0941: 81 30                        dw      (((('L'-'@')<<5)|('D'-'@'))<<5)|('A'-'@')
  1621                                        MNEM    'L','D','X'
+ 1621 00:0943: 98 30                        dw      (((('L'-'@')<<5)|('D'-'@'))<<5)|('X'-'@')
  1622                                        MNEM    'L','D','Y'
  Tue Dec 29 2015 22:30                                                                                                    Page 32


+ 1622 00:0945: 99 30                        dw      (((('L'-'@')<<5)|('D'-'@'))<<5)|('Y'-'@')
  1623                                        MNEM    'L','S','R'
+ 1623 00:0947: 72 32                        dw      (((('L'-'@')<<5)|('S'-'@'))<<5)|('R'-'@')
  1624                                        MNEM    'M','V','N'
+ 1624 00:0949: CE 36                        dw      (((('M'-'@')<<5)|('V'-'@'))<<5)|('N'-'@')
  1625                                        MNEM    'M','V','P'
+ 1625 00:094B: D0 36                        dw      (((('M'-'@')<<5)|('V'-'@'))<<5)|('P'-'@')
  1626                                        MNEM    'N','O','P'
+ 1626 00:094D: F0 39                        dw      (((('N'-'@')<<5)|('O'-'@'))<<5)|('P'-'@')
  1627                                        MNEM    'O','R','A'
+ 1627 00:094F: 41 3E                        dw      (((('O'-'@')<<5)|('R'-'@'))<<5)|('A'-'@')
  1628                                        MNEM    'P','E','A'
+ 1628 00:0951: A1 40                        dw      (((('P'-'@')<<5)|('E'-'@'))<<5)|('A'-'@')
  1629                                        MNEM    'P','E','I'
+ 1629 00:0953: A9 40                        dw      (((('P'-'@')<<5)|('E'-'@'))<<5)|('I'-'@')
  1630                                        MNEM    'P','E','R'
+ 1630 00:0955: B2 40                        dw      (((('P'-'@')<<5)|('E'-'@'))<<5)|('R'-'@')
  1631                                        MNEM    'P','H','A'
+ 1631 00:0957: 01 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('A'-'@')
  1632                                        MNEM    'P','H','B'
+ 1632 00:0959: 02 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('B'-'@')
  1633                                        MNEM    'P','H','D'
+ 1633 00:095B: 04 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('D'-'@')
  1634                                        MNEM    'P','H','K'
+ 1634 00:095D: 0B 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('K'-'@')
  1635                                        MNEM    'P','H','P'
+ 1635 00:095F: 10 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('P'-'@')
  1636                                        MNEM    'P','H','X'
+ 1636 00:0961: 18 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('X'-'@')
  1637                                        MNEM    'P','H','Y'
+ 1637 00:0963: 19 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('Y'-'@')
  1638                                        MNEM    'P','L','A'
+ 1638 00:0965: 81 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('A'-'@')
  1639                                        MNEM    'P','L','B'
+ 1639 00:0967: 82 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('B'-'@')
  1640                                        MNEM    'P','L','D'
+ 1640 00:0969: 84 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('D'-'@')
  1641                                        MNEM    'P','L','P'
+ 1641 00:096B: 90 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('P'-'@')
  1642                                        MNEM    'P','L','X'
+ 1642 00:096D: 98 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('X'-'@')
  1643                                        MNEM    'P','L','Y'
+ 1643 00:096F: 99 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('Y'-'@')
  1644                                        MNEM    'R','E','P'
+ 1644 00:0971: B0 48                        dw      (((('R'-'@')<<5)|('E'-'@'))<<5)|('P'-'@')
  1645                                        MNEM    'R','O','L'
+ 1645 00:0973: EC 49                        dw      (((('R'-'@')<<5)|('O'-'@'))<<5)|('L'-'@')
  1646                                        MNEM    'R','O','R'
+ 1646 00:0975: F2 49                        dw      (((('R'-'@')<<5)|('O'-'@'))<<5)|('R'-'@')
  1647                                        MNEM    'R','T','I'
+ 1647 00:0977: 89 4A                        dw      (((('R'-'@')<<5)|('T'-'@'))<<5)|('I'-'@')
  1648                                        MNEM    'R','T','L'
+ 1648 00:0979: 8C 4A                        dw      (((('R'-'@')<<5)|('T'-'@'))<<5)|('L'-'@')
  1649                                        MNEM    'R','T','S'
+ 1649 00:097B: 93 4A                        dw      (((('R'-'@')<<5)|('T'-'@'))<<5)|('S'-'@')
  1650                                        MNEM    'S','B','C'
+ 1650 00:097D: 43 4C                        dw      (((('S'-'@')<<5)|('B'-'@'))<<5)|('C'-'@')
  1651                                        MNEM    'S','E','C'
  Tue Dec 29 2015 22:30                                                                                                    Page 33


+ 1651 00:097F: A3 4C                        dw      (((('S'-'@')<<5)|('E'-'@'))<<5)|('C'-'@')
  1652                                        MNEM    'S','E','D'
+ 1652 00:0981: A4 4C                        dw      (((('S'-'@')<<5)|('E'-'@'))<<5)|('D'-'@')
  1653                                        MNEM    'S','E','I'
+ 1653 00:0983: A9 4C                        dw      (((('S'-'@')<<5)|('E'-'@'))<<5)|('I'-'@')
  1654                                        MNEM    'S','E','P'
+ 1654 00:0985: B0 4C                        dw      (((('S'-'@')<<5)|('E'-'@'))<<5)|('P'-'@')
  1655                                        MNEM    'S','T','A'
+ 1655 00:0987: 81 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('A'-'@')
  1656                                        MNEM    'S','T','P'
+ 1656 00:0989: 90 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('P'-'@')
  1657                                        MNEM    'S','T','X'
+ 1657 00:098B: 98 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('X'-'@')
  1658                                        MNEM    'S','T','Y'
+ 1658 00:098D: 99 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('Y'-'@')
  1659                                        MNEM    'S','T','Z'
+ 1659 00:098F: 9A 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('Z'-'@')
  1660                                        MNEM    'T','A','X'
+ 1660 00:0991: 38 50                        dw      (((('T'-'@')<<5)|('A'-'@'))<<5)|('X'-'@')
  1661                                        MNEM    'T','A','Y'
+ 1661 00:0993: 39 50                        dw      (((('T'-'@')<<5)|('A'-'@'))<<5)|('Y'-'@')
  1662                                        MNEM    'T','C','D'
+ 1662 00:0995: 64 50                        dw      (((('T'-'@')<<5)|('C'-'@'))<<5)|('D'-'@')
  1663                                        MNEM    'T','C','S'
+ 1663 00:0997: 73 50                        dw      (((('T'-'@')<<5)|('C'-'@'))<<5)|('S'-'@')
  1664                                        MNEM    'T','D','C'
+ 1664 00:0999: 83 50                        dw      (((('T'-'@')<<5)|('D'-'@'))<<5)|('C'-'@')
  1665                                        MNEM    'T','R','B'
+ 1665 00:099B: 42 52                        dw      (((('T'-'@')<<5)|('R'-'@'))<<5)|('B'-'@')
  1666                                        MNEM    'T','S','B'
+ 1666 00:099D: 62 52                        dw      (((('T'-'@')<<5)|('S'-'@'))<<5)|('B'-'@')
  1667                                        MNEM    'T','S','C'
+ 1667 00:099F: 63 52                        dw      (((('T'-'@')<<5)|('S'-'@'))<<5)|('C'-'@')
  1668                                        MNEM    'T','S','X'
+ 1668 00:09A1: 78 52                        dw      (((('T'-'@')<<5)|('S'-'@'))<<5)|('X'-'@')
  1669                                        MNEM    'T','X','A'
+ 1669 00:09A3: 01 53                        dw      (((('T'-'@')<<5)|('X'-'@'))<<5)|('A'-'@')
  1670                                        MNEM    'T','X','S'
+ 1670 00:09A5: 13 53                        dw      (((('T'-'@')<<5)|('X'-'@'))<<5)|('S'-'@')
  1671                                        MNEM    'T','X','Y'
+ 1671 00:09A7: 19 53                        dw      (((('T'-'@')<<5)|('X'-'@'))<<5)|('Y'-'@')
  1672                                        MNEM    'T','Y','A'
+ 1672 00:09A9: 21 53                        dw      (((('T'-'@')<<5)|('Y'-'@'))<<5)|('A'-'@')
  1673                                        MNEM    'T','Y','X'
+ 1673 00:09AB: 38 53                        dw      (((('T'-'@')<<5)|('Y'-'@'))<<5)|('X'-'@')
  1674                                        MNEM    'W','A','I'
+ 1674 00:09AD: 29 5C                        dw      (((('W'-'@')<<5)|('A'-'@'))<<5)|('I'-'@')
  1675                                        MNEM    'W','D','M'
+ 1675 00:09AF: 8D 5C                        dw      (((('W'-'@')<<5)|('D'-'@'))<<5)|('M'-'@')
  1676                                        MNEM    'X','B','A'
+ 1676 00:09B1: 41 60                        dw      (((('X'-'@')<<5)|('B'-'@'))<<5)|('A'-'@')
  1677                                        MNEM    'X','C','E'
+ 1677 00:09B3: 65 60                        dw      (((('X'-'@')<<5)|('C'-'@'))<<5)|('E'-'@')
  1678                        
  1679                        ;===============================================================================
  1680                        ; String Literals
  1681                        ;-------------------------------------------------------------------------------
  1682                        
  Tue Dec 29 2015 22:30                                                                                                    Page 34


  1683 00:09B5: 0D 0A        TITLE           db      CR,LF
  1684                                        ifdef   W65C816SXB
  1685 00:09B7: 57 36 35 43                  db      "W65C816SXB"
       00:09BB: 38 31 36 53 
       00:09BF: 58 42 
  1686                                        endif
  1687                                        ifdef   W65C265SXB
  1688                                        db      "W65C265SXB"
  1689                                        endif
  1690 00:09C1: 2D 48 61 63                  db      "-Hacker [15.12]",0
       00:09C5: 6B 65 72 20 
       00:09C9: 5B 31 35 2E 
       00:09CD: 31 32 5D 00 
  1691                        
  1692 00:09D1: 0D 0A 45 72  ERROR           db      CR,LF,"Error - Type ? for help",0
       00:09D5: 72 6F 72 20 
       00:09D9: 2D 20 54 79 
       00:09DD: 70 65 20 3F 
       00:09E1: 20 66 6F 72 
       00:09E5: 20 68 65 6C 
       00:09E9: 70 00 
  1693                        
  1694 00:09EB: 0D 0A 45 72  ERASE_FAILED    db      CR,LF,"Erase failed",0
       00:09EF: 61 73 65 20 
       00:09F3: 66 61 69 6C 
       00:09F7: 65 64 00 
  1695 00:09FA: 0D 0A 57 72  WRITE_FAILED    db      CR,LF,"Write failed",0
       00:09FE: 69 74 65 20 
       00:0A02: 66 61 69 6C 
       00:0A06: 65 64 00 
  1696 00:0A09: 0D 0A 57 44  NOT_SAFE        db      CR,LF,"WDC ROM Bank Selected",0
       00:0A0D: 43 20 52 4F 
       00:0A11: 4D 20 42 61 
       00:0A15: 6E 6B 20 53 
       00:0A19: 65 6C 65 63 
       00:0A1D: 74 65 64 00 
  1697 00:0A21: 0D 0A 49 6E  INVALID_S19     db      CR,LF,"Invalid S19 record",0
       00:0A25: 76 61 6C 69 
       00:0A29: 64 20 53 31 
       00:0A2D: 39 20 72 65 
       00:0A31: 63 6F 72 64 
       00:0A35: 00 
  1698                        
  1699 00:0A36: 0D 0A 57 61  WAITING         db      CR,LF,"Waiting for XMODEM transfer to start",0
       00:0A3A: 69 74 69 6E 
       00:0A3E: 67 20 66 6F 
       00:0A42: 72 20 58 4D 
       00:0A46: 4F 44 45 4D 
       00:0A4A: 20 74 72 61 
       00:0A4E: 6E 73 66 65 
       00:0A52: 72 20 74 6F 
       00:0A56: 20 73 74 61 
       00:0A5A: 72 74 00 
  1700 00:0A5D: 0D 0A 54 69  TIMEOUT         db      CR,LF,"Timeout",0
       00:0A61: 6D 65 6F 75 
       00:0A65: 74 00 
  1701                        
  1702 00:0A67: 0D 0A 42 20  HELP            db      CR,LF,"B bb           - Set memory bank"
  Tue Dec 29 2015 22:30                                                                                                    Page 35


       00:0A6B: 62 62 20 20 
       00:0A6F: 20 20 20 20 
       00:0A73: 20 20 20 20 
       00:0A77: 20 2D 20 53 
       00:0A7B: 65 74 20 6D 
       00:0A7F: 65 6D 6F 72 
       00:0A83: 79 20 62 61 
       00:0A87: 6E 6B 
  1703 00:0A89: 0D 0A 44 20                  db      CR,LF,"D ssss eeee    - Disassemble memory in current bank"
       00:0A8D: 73 73 73 73 
       00:0A91: 20 65 65 65 
       00:0A95: 65 20 20 20 
       00:0A99: 20 2D 20 44 
       00:0A9D: 69 73 61 73 
       00:0AA1: 73 65 6D 62 
       00:0AA5: 6C 65 20 6D 
       00:0AA9: 65 6D 6F 72 
       00:0AAD: 79 20 69 6E 
       00:0AB1: 20 63 75 72 
       00:0AB5: 72 65 6E 74 
       00:0AB9: 20 62 61 6E 
       00:0ABD: 6B 
  1704 00:0ABE: 0D 0A 45 20                  db      CR,LF,"E              - Erase ROM area"
       00:0AC2: 20 20 20 20 
       00:0AC6: 20 20 20 20 
       00:0ACA: 20 20 20 20 
       00:0ACE: 20 2D 20 45 
       00:0AD2: 72 61 73 65 
       00:0AD6: 20 52 4F 4D 
       00:0ADA: 20 61 72 65 
       00:0ADE: 61 
  1705                                        ifdef   W65C265SXB
  1706                                        db      CR,LF,"F 0-1          - Enable/Disable WDC ROM"
  1707                                        endif
  1708 00:0ADF: 0D 0A 47 20                  db      CR,LF,"G [xxxx]       - Run from bb:xxxx or invoke reset vector"
       00:0AE3: 5B 78 78 78 
       00:0AE7: 78 5D 20 20 
       00:0AEB: 20 20 20 20 
       00:0AEF: 20 2D 20 52 
       00:0AF3: 75 6E 20 66 
       00:0AF7: 72 6F 6D 20 
       00:0AFB: 62 62 3A 78 
       00:0AFF: 78 78 78 20 
       00:0B03: 6F 72 20 69 
       00:0B07: 6E 76 6F 6B 
       00:0B0B: 65 20 72 65 
       00:0B0F: 73 65 74 20 
       00:0B13: 76 65 63 74 
       00:0B17: 6F 72 
  1709 00:0B19: 0D 0A 4D 20                  db      CR,LF,"M ssss eeee    - Display memory in current bank"
       00:0B1D: 73 73 73 73 
       00:0B21: 20 65 65 65 
       00:0B25: 65 20 20 20 
       00:0B29: 20 2D 20 44 
       00:0B2D: 69 73 70 6C 
       00:0B31: 61 79 20 6D 
       00:0B35: 65 6D 6F 72 
       00:0B39: 79 20 69 6E 
  Tue Dec 29 2015 22:30                                                                                                    Page 36


       00:0B3D: 20 63 75 72 
       00:0B41: 72 65 6E 74 
       00:0B45: 20 62 61 6E 
       00:0B49: 6B 
  1710 00:0B4A: 0D 0A 52 20                  db      CR,LF,"R 0-3          - Select ROM bank 0-3"
       00:0B4E: 30 2D 33 20 
       00:0B52: 20 20 20 20 
       00:0B56: 20 20 20 20 
       00:0B5A: 20 2D 20 53 
       00:0B5E: 65 6C 65 63 
       00:0B62: 74 20 52 4F 
       00:0B66: 4D 20 62 61 
       00:0B6A: 6E 6B 20 30 
       00:0B6E: 2D 33 
  1711 00:0B70: 0D 0A 53 2E                  db      CR,LF,"S...           - Process S19 record"
       00:0B74: 2E 2E 20 20 
       00:0B78: 20 20 20 20 
       00:0B7C: 20 20 20 20 
       00:0B80: 20 2D 20 50 
       00:0B84: 72 6F 63 65 
       00:0B88: 73 73 20 53 
       00:0B8C: 31 39 20 72 
       00:0B90: 65 63 6F 72 
       00:0B94: 64 
  1712 00:0B95: 0D 0A 57 20                  db      CR,LF,"W xxxx yy      - Set memory at xxxx to yy"
       00:0B99: 78 78 78 78 
       00:0B9D: 20 79 79 20 
       00:0BA1: 20 20 20 20 
       00:0BA5: 20 2D 20 53 
       00:0BA9: 65 74 20 6D 
       00:0BAD: 65 6D 6F 72 
       00:0BB1: 79 20 61 74 
       00:0BB5: 20 78 78 78 
       00:0BB9: 78 20 74 6F 
       00:0BBD: 20 79 79 
  1713 00:0BC0: 0D 0A 58 20                  db      CR,LF,"X xxxx         - XMODEM receive to bb:xxxx"
       00:0BC4: 78 78 78 78 
       00:0BC8: 20 20 20 20 
       00:0BCC: 20 20 20 20 
       00:0BD0: 20 2D 20 58 
       00:0BD4: 4D 4F 44 45 
       00:0BD8: 4D 20 72 65 
       00:0BDC: 63 65 69 76 
       00:0BE0: 65 20 74 6F 
       00:0BE4: 20 62 62 3A 
       00:0BE8: 78 78 78 78 
  1714 00:0BEC: 00                           db      0
  1715                        
  1716                                        end


      Lines assembled: 1942
      Errors: 0
