  Thu Nov 19 2015 15:52                                                                                                    Page 1


                                               ***************************************
                                               **      WDC 65C816 Macro Assembler   **
                                               **                                   **
                                               **     Version 3.49.1- Feb  6 2006    **
                                               ***************************************

     1                        ;==============================================================================
     2                        ;  ______  ______        _   _            _
     3                        ; / ___\ \/ / __ )      | | | | __ _  ___| | _____ _ __
     4                        ; \___ \\  /|  _ \ _____| |_| |/ _` |/ __| |/ / _ \ '__|
     5                        ;  ___) /  \| |_) |_____|  _  | (_| | (__|   <  __/ |
     6                        ; |____/_/\_\____/      |_| |_|\__,_|\___|_|\_\___|_|
     7                        ;
     8                        ; A program for Hacking your W65C816SXB
     9                        ;------------------------------------------------------------------------------
    10                        ; Copyright (C)2015 Andrew Jacobs
    11                        ; All rights reserved.
    12                        ;
    13                        ; This work is made available under the terms of the Creative Commons
    14                        ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
    15                        ; following URL to see the details.
    16                        ;
    17                        ; http://creativecommons.org/licenses/by-nc-sa/4.0/
    18                        ;
    19                        ;==============================================================================
    20                        ; Notes:
    21                        ;
    22                        ; This program provides a simple monitor that you can use to inspect the memory
    23                        ; in your W65C816SXB and reprogram parts of the flash ROM.
    24                        ;
    25                        ;------------------------------------------------------------------------------
    26                        
    27                                        pw      132
    28                                        inclist on
    29                        
    30                                        chip    65816
    31                                        longi   off
    32                                        longa   off
    33                        
    34                                        include "w65c816.inc"
     1                        ;==============================================================================
     2                        ; __        ____  ____   ____ ___  _  __   
     3                        ; \ \      / / /_| ___| / ___( _ )/ |/ /_  
     4                        ;  \ \ /\ / / '_ \___ \| |   / _ \| | '_ \ 
     5                        ;   \ V  V /| (_) |__) | |__| (_) | | (_) |
     6                        ;    \_/\_/  \___/____/ \____\___/|_|\___/ 
     7                        ;
     8                        ; Western Design Center W65C816 device definitions                                          
     9                        ;------------------------------------------------------------------------------
    10                        
    11                        
    12                        ;==============================================================================
    13                        ; Status Register Bits
    14                        ;------------------------------------------------------------------------------
    15                        
    16             00000007   N_FLAG          equ     7
    17             00000006   V_FLAG          equ     6
    18             00000005   M_FLAG          equ     5
  Thu Nov 19 2015 15:52                                                                                                    Page 2


    19             00000004   X_FLAG          equ     4
    20             00000004   B_FLAG          equ     4
    21             00000003   D_FLAG          equ     3
    22             00000002   I_FLAG          equ     2
    23             00000001   Z_FLAG          equ     1
    24             00000000   C_FLAG          equ     0
    25                        
    26                        ;==============================================================================
    27                        ; Macros
    28                        ;------------------------------------------------------------------------------
    29                        
    30                        ; Puts the processor in emulation mode. A, X and Y become 8-bits and the stack
    31                        ; is fixed at $0100-$01ff. 
    32                        
    33                        emulate         macro
    34                                        sec
    35                                        xce
    36                                        endm
    37                        
    38                        ; Puts the processor in native mode. The size of the memory and index register
    39                        ; operations is not controlled by the M & X bits in the status register.
    40                        
    41                        native          macro
    42                                        clc
    43                                        xce
    44                                        endm
    45                        
    46                        ; Resets the M bit making the accumator and memory accesses 16-bits wide.
    47                         
    48                        long_a          macro
    49                                        rep     #(1<<M_FLAG)
    50                                        longa   on
    51                                        endm
    52                        
    53                        ; Resets the X bit making the index registers 16-bits wide
    54                        
    55                        long_i          macro
    56                                        rep     #(1<<X_FLAG)
    57                                        longi   on
    58                                        endm
    59                        
    60                        ; Resets the M and X bits making the accumator, memory accesses and index
    61                        ; registers 16-bits wide.
    62                                        
    63                        long_ai         macro
    64                                        rep     #(1<<M_FLAG)|(1<<X_FLAG)
    65                                        longa   on
    66                                        longi   on
    67                                        endm
    68                        
    69                        ; Sets the M bit making the accumator and memory accesses 16-bits wide.
    70                        
    71                        short_a         macro
    72                                        sep     #(1<<M_FLAG)
    73                                        longa   off
    74                                        endm
    75                        
    76                        short_i         macro
  Thu Nov 19 2015 15:52                                                                                                    Page 3


    77                                        sep     #(1<<X_FLAG)
    78                                        longi   off
    79                                        endm
    80                                        
    81                        short_ai        macro
    82                                        sep     #(1<<M_FLAG)|(1<<X_FLAG)
    83                                        longa   off
    84                                        longi   off
    85                                        endm
    35                                        include "w65c816sxb.inc"
     1                        ;==============================================================================
     2                        ; __        ____  ____   ____ ___  _  __  ______  ______
     3                        ; \ \      / / /_| ___| / ___( _ )/ |/ /_/ ___\ \/ / __ )
     4                        ;  \ \ /\ / / '_ \___ \| |   / _ \| | '_ \___ \\  /|  _ \
     5                        ;   \ V  V /| (_) |__) | |__| (_) | | (_) |__) /  \| |_) |
     6                        ;    \_/\_/  \___/____/ \____\___/|_|\___/____/_/\_\____/
     7                        ;
     8                        ; Western Design Center W65C816SXB Development Board Hardware Definitions
     9                        ;------------------------------------------------------------------------------
    10                        ; Copyright (C)2015 HandCoded Software Ltd.
    11                        ; All rights reserved.
    12                        ;
    13                        ; This work is made available under the terms of the Creative Commons
    14                        ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
    15                        ; following URL to see the details.
    16                        ;
    17                        ; http://creativecommons.org/licenses/by-nc-sa/4.0/
    18                        ;
    19                        ;==============================================================================
    20                        ; Notes:
    21                        ;
    22                        ; All of the current stock of W65C51 ACIAs have a silicon bug that causes the
    23                        ; 'Transmit Data Register Empty' (TDRE) bit in the status register to be stuck
    24                        ; high making it impossible to tell when the transmitter is ready for the next
    25                        ; data byte.
    26                        ;
    27                        ;------------------------------------------------------------------------------
    28                        
    29             007A1200   OSC_FREQ        equ     8000000                 ; SXB runs at 8MHz
    30                        
    31                        ;==============================================================================
    32                        ; W65C51 ACIA
    33                        ;------------------------------------------------------------------------------
    34                        
    35             00007F80   ACIA_RXD        equ     $7f80
    36             00007F80   ACIA_TXD        equ     $7f80
    37             00007F81   ACIA_SR         equ     $7f81
    38             00007F82   ACIA_CMD        equ     $7f82
    39             00007F83   ACIA_CTL        equ     $7f83
    40                        
    41                        ;==============================================================================
    42                        ; W65C21 PIA
    43                        ;------------------------------------------------------------------------------
    44                        
    45             00007FA0   PIA_PIA         equ     $7fa0
    46             00007FA0   PIA_DDRA        equ     $7fa0
    47             00007FA1   PIA_CRA         equ     $7fa1
    48             00007FA2   PIA_PIB         equ     $7fa2
  Thu Nov 19 2015 15:52                                                                                                    Page 4


    49             00007FA2   PIA_DDRB        equ     $7fa2
    50             00007FA3   PIA_CRB         equ     $7fa3
    51                        
    52                        ;==============================================================================
    53                        ; W65C22 VIA
    54                        ;------------------------------------------------------------------------------
    55                        
    56             00007FC0   VIA1_ORB        equ     $7fc0
    57             00007FC0   VIA1_IRB        equ     $7fc0
    58             00007FC1   VIA1_ORA        equ     $7fc1
    59             00007FC1   VIA1_IRA        equ     $7fc1
    60             00007FC2   VIA1_DDRB       equ     $7fc2
    61             00007FC3   VIA1_DDRA       equ     $7fc3
    62             00007FC4   VIA1_T1CL       equ     $7fc4
    63             00007FC5   VIA1_T1CH       equ     $7fc5
    64             00007FC6   VIA1_T1LL       equ     $7fc6
    65             00007FC7   VIA1_T1LH       equ     $7fc7
    66             00007FC8   VIA1_T2CL       equ     $7fc8
    67             00007FC9   VIA1_T2CH       equ     $7fc9
    68             00007FCA   VIA1_SR         equ     $7fca
    69             00007FCB   VIA1_ACR        equ     $7fcb
    70             00007FCC   VIA1_PCR        equ     $7fcc
    71             00007FCD   VIA1_IFR        equ     $7fcd
    72             00007FCE   VIA1_IER        equ     $7fce
    73             00007FCF   VIA1_ORAN       equ     $7fcf
    74             00007FCF   VIA1_IRAN       equ     $7fcf
    75                        
    76                        ;------------------------------------------------------------------------------
    77                        
    78             00007FE0   VIA2_ORB        equ     $7fe0
    79             00007FE0   VIA2_IRB        equ     $7fe0
    80             00007FE1   VIA2_ORA        equ     $7fe1
    81             00007FE1   VIA2_IRA        equ     $7fe1
    82             00007FE2   VIA2_DDRB       equ     $7fe2
    83             00007FE3   VIA2_DDRA       equ     $7fe3
    84             00007FE4   VIA2_T1CL       equ     $7fe4
    85             00007FE5   VIA2_T1CH       equ     $7fe5
    86             00007FE6   VIA2_T1LL       equ     $7fe6
    87             00007FE7   VIA2_T1LH       equ     $7fe7
    88             00007FE8   VIA2_T2CL       equ     $7fe8
    89             00007FE9   VIA2_T2CH       equ     $7fe9
    90             00007FEA   VIA2_SR         equ     $7fea
    91             00007FEB   VIA2_ACR        equ     $7feb
    92             00007FEC   VIA2_PCR        equ     $7fec
    93             00007FED   VIA2_IFR        equ     $7fed
    94             00007FEE   VIA2_IER        equ     $7fee
    95             00007FEF   VIA2_ORAN       equ     $7fef
    96             00007FEF   VIA2_IRAN       equ     $7fef
    36                        
    37                        ;==============================================================================
    38                        ; ASCII Character Codes
    39                        ;------------------------------------------------------------------------------
    40                        
    41             00000001   SOH             equ     $01
    42             00000004   EOT             equ     $04
    43             00000006   ACK             equ     $06
    44             00000007   BEL             equ     $07
    45             00000008   BS              equ     $08
  Thu Nov 19 2015 15:52                                                                                                    Page 5


    46             0000000A   LF              equ     $0a
    47             0000000D   CR              equ     $0d
    48             00000015   NAK             equ     $15
    49             00000018   CAN             equ     $18
    50             0000001B   ESC             equ     $1b
    51             0000007F   DEL             equ     $7f
    52                        
    53                        ;==============================================================================
    54                        ; Data Areas
    55                        ;------------------------------------------------------------------------------
    56                        
    57                                        page0
    58                        
    59 00:0000:              BUFLEN          ds      1                       ; Command buffer length
    60 00:0001:              BANK            ds      1                       ; Memory bank
    61                        
    62 00:0002:              ADDR_S          ds      3                       ; Start address
    63 00:0005:              ADDR_E          ds      3                       ; End address
    64                        
    65 00:0008:              BLOCK           ds      1                       ; XMODEM block number
    66 00:0009:              RETRIES         ds      1                       ; Retry count
    67 00:000A:              SUM             ds      1                       ; Checksum
    68                        
    69 00:000B:              TEMP            ds      4                       ; Scratch workspace
    70                        
    71                                        data
    72                                        org     $200
    73                        
    74 00:0200:              BUFFER          ds      128                     ; Command buffer
    75                        
    76                        ;==============================================================================
    77                        ; Initialisation
    78                        ;------------------------------------------------------------------------------
    79                        
    80                                        code
    81                                        public  Start
    82                                        extern  UartRx
    83                                        extern  UartTx
    84                                        extern  UartRxTest
    85                        Start:
    86                                        short_a                         ; Configure register sizes
+   86 00:0000: E2 20                        sep     #(1<<M_FLAG)
+   86                                        longa   off
    87                                        long_i
+   87 00:0002: C2 10                        rep     #(1<<X_FLAG)
+   87                                        longi   on
    88 00:0004: 20 xx xx                     jsr     UartCRLF
    89 00:0007: A2 xx xx                     ldx     #TITLE                  ; Display application title
    90 00:000A: 20 xx xx                     jsr     UartStr
    91                        
    92 00:000D: 64 xx                        stz     BANK                    ; Reset default bank
    93                        
    94                        ;==============================================================================
    95                        ; Command Processor
    96                        ;------------------------------------------------------------------------------
    97                        
    98                        NewCommand:
    99                                        short_i
  Thu Nov 19 2015 15:52                                                                                                    Page 6


+   99 00:000F: E2 10                        sep     #(1<<X_FLAG)
+   99                                        longi   off
   100 00:0011: 64 xx                        stz     BUFLEN                  ; Clear the buffer
   101 00:0013: 20 xx xx                     jsr     UartCRLF                ; Move to a new line
   102                        
   103 00:0016: A9 2E                        lda     #'.'                    ; Output the prompt
   104 00:0018: 20 xx xx                     jsr     UartTx
   105                        
   106 00:001B: A2 00                        ldx     #0
   107 00:001D: E4 xx        DisplayCmd:     cpx     BUFLEN                  ; Any saved characters
   108 00:001F: F0 0E                        beq     ReadCommand
   109 00:0021: BD 00 02                     lda     BUFFER,x                ; Yes, display them
   110 00:0024: 20 xx xx                     jsr     UartTx
   111 00:0027: E8                           inx
   112 00:0028: 80 F3                        bra     DisplayCmd
   113                        
   114                        RingBell:
   115 00:002A: A9 07                        lda     #BEL                    ; Make a beep
   116 00:002C: 20 xx xx                     jsr     UartTx
   117                        
   118                        ReadCommand:
   119 00:002F: 20 xx xx                     jsr     UartRx                  ; Wait for character
   120                        
   121 00:0032: C9 1B                        cmp     #ESC                    ; Cancel input?
   122 00:0034: F0 D9                        beq     NewCommand              ; Yes, clear and restart
   123 00:0036: C9 0D                        cmp     #CR                     ; End of command?
   124 00:0038: F0 2F                        beq     ProcessCommand          ; Yes, start processing
   125                        
   126 00:003A: C9 08                        cmp     #BS                     ; Back space?
   127 00:003C: F0 15                        beq     BackSpace
   128 00:003E: C9 7F                        cmp     #DEL                    ; Delete?
   129 00:0040: F0 11                        beq     BackSpace
   130                        
   131 00:0042: C9 20                        cmp     #' '                    ; Printable character
   132 00:0044: 90 E4                        bcc     RingBell                ; No.
   133 00:0046: C9 7F                        cmp     #DEL
   134 00:0048: B0 E0                        bcs     RingBell                ; No.
   135 00:004A: 9D 00 02                     sta     BUFFER,x                ; Save rhe character
   136 00:004D: E8                           inx
   137 00:004E: 20 xx xx                     jsr     UartTx                  ; Echo it and repeat
   138 00:0051: 80 DC                        bra     ReadCommand
   139                        
   140                        BackSpace:
   141 00:0053: E0 00                        cpx     #0                      ; Buffer empty?
   142 00:0055: F0 D3                        beq     RingBell                ; Yes, beep and continue
   143 00:0057: CA                           dex                             ; No, remove last character
   144 00:0058: A9 08                        lda     #BS
   145 00:005A: 20 xx xx                     jsr     UartTx
   146 00:005D: A9 20                        lda     #' '
   147 00:005F: 20 xx xx                     jsr     UartTx
   148 00:0062: A9 08                        lda     #BS
   149 00:0064: 20 xx xx                     jsr     UartTx
   150 00:0067: 80 C6                        bra     ReadCommand             ; And retry
   151                        
   152                        ProcessCommand:
   153 00:0069: 86 xx                        stx     BUFLEN                  ; Save final length
   154 00:006B: A0 00                        ldy     #0                      ; Load index for start
   155                        
  Thu Nov 19 2015 15:52                                                                                                    Page 7


   156 00:006D: 20 xx xx                     jsr     SkipSpaces              ; Fetch command character
   157 00:0070: B0 9D                        bcs     NewCommand              ; None, empty command
   158                        
   159                        ;==============================================================================
   160                        ; B - Select Memory Bank
   161                        ;------------------------------------------------------------------------------
   162                        
   163 00:0072: C9 42                        cmp     #'B'                    ; Select memory bank?
   164 00:0074: D0 0D                        bne     NotMemoryBank
   165                        
   166 00:0076: A2 xx                        ldx     #BANK                   ; Parse bank
   167 00:0078: 20 xx xx                     jsr     GetByte
   168 00:007B: 90 03                        bcc     $+5
   169 00:007D: 4C xx xx                     jmp     ShowError
   170 00:0080: 4C xx xx                     jmp     NewCommand
   171                        NotMemoryBank:
   172                        
   173                        ;==============================================================================
   174                        ; E - Erase ROM bank
   175                        ;------------------------------------------------------------------------------
   176                        
   177 00:0083: C9 45                        cmp     #'E'                    ; Erase bank?
   178 00:0085: D0 45                        bne     NotEraseBank
   179                        
   180 00:0087: 20 xx xx                     jsr     CheckSafe
   181                        
   182 00:008A: A9 00                        lda     #$00                    ; Set start address
   183 00:008C: 85 xx                        sta     ADDR_S+0
   184 00:008E: A9 80                        lda     #$80
   185 00:0090: 85 xx                        sta     ADDR_S+1
   186                        EraseLoop:
   187 00:0092: A9 AA                        lda     #$aa                    ; Unlock flash
   188 00:0094: 8D 55 D5                     sta     $8000+$5555
   189 00:0097: A9 55                        lda     #$55
   190 00:0099: 8D AA AA                     sta     $8000+$2aaa
   191 00:009C: A9 80                        lda     #$80                    ; Signal erase
   192 00:009E: 8D 55 D5                     sta     $8000+$5555
   193 00:00A1: A9 AA                        lda     #$aa
   194 00:00A3: 8D 55 D5                     sta     $8000+$5555
   195 00:00A6: A9 55                        lda     #$55
   196 00:00A8: 8D AA AA                     sta     $8000+$2aaa
   197 00:00AB: A9 30                        lda     #$30                    ; Sector erase
   198 00:00AD: 92 xx                        sta     (ADDR_S)
   199                        
   200                        EraseWait:
   201 00:00AF: B2 xx                        lda     (ADDR_S)                ; Wait for erase to finish
   202 00:00B1: C9 FF                        cmp     #$FF
   203 00:00B3: D0 FA                        bne     EraseWait
   204                        
   205 00:00B5: 18                           clc                             ; Move to next sector
   206 00:00B6: A5 xx                        lda     ADDR_S+1
   207 00:00B8: 69 10                        adc     #$10
   208 00:00BA: 85 xx                        sta     ADDR_S+1
   209 00:00BC: 90 D4                        bcc     EraseLoop               ; Repeat until end of memory
   210 00:00BE: 4C xx xx                     jmp     NewCommand              ; And start over
   211                        
   212                        EraseFailed:
   213                                        long_i                          ; Warn that erase failed
  Thu Nov 19 2015 15:52                                                                                                    Page 8


+  213 00:00C1: C2 10                        rep     #(1<<X_FLAG)
+  213                                        longi   on
   214 00:00C3: A2 xx xx                     ldx     #ERASE_FAILED
   215 00:00C6: 20 xx xx                     jsr     UartStr
   216                                        longi   off
   217 00:00C9: 4C xx xx                     jmp     NewCommand              ; And start over
   218                        NotEraseBank:
   219                        
   220                        ;==============================================================================
   221                        ; G - Goto
   222                        ;------------------------------------------------------------------------------
   223                        
   224 00:00CC: C9 47                        cmp     #'G'                    ; Invoke code
   225 00:00CE: D0 0D                        bne     NotGoto
   226                        
   227 00:00D0: A2 xx                        ldx     #ADDR_S                 ; Parse execution address
   228 00:00D2: 20 xx xx                     jsr     GetAddr
   229 00:00D5: B0 03                        bcs     $+5
   230 00:00D7: DC xx xx                     jmp     [ADDR_S]                ; Run from address
   231 00:00DA: 6C FC FF                     jmp     ($FFFC)                 ; Otherwise reset
   232                        NotGoto:
   233                        
   234                        ;==============================================================================
   235                        ; M - Display Memory
   236                        ;------------------------------------------------------------------------------
   237                        
   238 00:00DD: C9 4D                        cmp     #'M'                    ; Memory display?
   239 00:00DF: D0 74                        bne     NotMemoryDisplay
   240                        
   241 00:00E1: A2 xx                        ldx     #ADDR_S                 ; Parse start address
   242 00:00E3: 20 xx xx                     jsr     GetAddr
   243 00:00E6: 90 03                        bcc     $+5
   244 00:00E8: 4C xx xx                     jmp     ShowError
   245 00:00EB: A2 xx                        ldx     #ADDR_E                 ; Parse end address
   246 00:00ED: 20 xx xx                     jsr     GetAddr
   247 00:00F0: 90 03                        bcc     $+5
   248 00:00F2: 4C xx xx                     jmp     ShowError
   249                        
   250                        DisplayMemory:
   251 00:00F5: 20 xx xx                     jsr     UartCRLF
   252 00:00F8: A5 xx                        lda     ADDR_S+2                ; Show memory address
   253 00:00FA: 20 xx xx                     jsr     UartHex2
   254 00:00FD: A9 3A                        lda     #':'
   255 00:00FF: 20 xx xx                     jsr     UartTx
   256 00:0102: A5 xx                        lda     ADDR_S+1
   257 00:0104: 20 xx xx                     jsr     UartHex2
   258 00:0107: A5 xx                        lda     ADDR_S+0
   259 00:0109: 20 xx xx                     jsr     UartHex2
   260                        
   261 00:010C: A0 00                        ldy     #0                      ; Show sixteen bytes of data
   262 00:010E: A9 20        ByteLoop:       lda     #' '
   263 00:0110: 20 xx xx                     jsr     UartTx
   264 00:0113: B7 xx                        lda     [ADDR_S],y
   265 00:0115: 20 xx xx                     jsr     UartHex2
   266 00:0118: C8                           iny
   267 00:0119: C0 10                        cpy     #16
   268 00:011B: D0 F1                        bne     ByteLoop
   269                        
  Thu Nov 19 2015 15:52                                                                                                    Page 9


   270 00:011D: A9 20                        lda     #' '
   271 00:011F: 20 xx xx                     jsr     UartTx
   272 00:0122: A9 7C                        lda     #'|'
   273 00:0124: 20 xx xx                     jsr     UartTx
   274 00:0127: A0 00                        ldy     #0                      ; Show sixteen characters
   275 00:0129: B7 xx        CharLoop:       lda     [ADDR_S],Y
   276 00:012B: 20 xx xx                     jsr     IsPrintable
   277 00:012E: B0 02                        bcs     $+4
   278 00:0130: A9 2E                        lda     #'.'
   279 00:0132: 20 xx xx                     jsr     UartTx
   280 00:0135: C8                           iny
   281 00:0136: C0 10                        cpy     #16
   282 00:0138: D0 EF                        bne     CharLoop
   283 00:013A: A9 7C                        lda     #'|'
   284 00:013C: 20 xx xx                     jsr     UartTx
   285                        
   286 00:013F: 18                           clc                             ; Bump the display address
   287 00:0140: 98                           tya
   288 00:0141: 65 xx                        adc     ADDR_S+0
   289 00:0143: 85 xx                        sta     ADDR_S+0
   290 00:0145: 90 02                        bcc     $+4
   291 00:0147: E6 xx                        inc     ADDR_S+1
   292                        
   293 00:0149: 38                           sec                             ; Exceeded the end address?
   294 00:014A: E5 xx                        sbc     ADDR_E+0
   295 00:014C: A5 xx                        lda     ADDR_S+1
   296 00:014E: E5 xx                        sbc     ADDR_E+1
   297 00:0150: 30 A3                        bmi     DisplayMemory           ; No, show more
   298                        
   299 00:0152: 4C xx xx                     jmp     NewCommand
   300                        NotMemoryDisplay:
   301                        
   302                        ;==============================================================================
   303                        ; R - Select ROM Bank
   304                        ;------------------------------------------------------------------------------
   305                        
   306 00:0155: C9 52                        cmp     #'R'                    ; ROM Bank?
   307 00:0157: D0 26                        bne     NotROMBank              ; No
   308                        
   309 00:0159: 20 xx xx                     jsr     SkipSpaces              ; Find first argument
   310 00:015C: 90 03                        bcc     $+5                     ; Success?
   311 00:015E: 4C xx xx     BankFail:       jmp     ShowError               ; No
   312                        
   313 00:0161: C9 30                        cmp     #'0'                    ; Check bank is 0..3
   314 00:0163: 90 F9                        bcc     BankFail
   315 00:0165: C9 34                        cmp     #'3'+1
   316 00:0167: B0 F5                        bcs     BankFail
   317                        
   318 00:0169: 85 xx                        sta     TEMP                    ; Work out VIA settings
   319 00:016B: A9 00                        lda     #0
   320 00:016D: 66 xx                        ror     TEMP                    ; Bit 0 set
   321 00:016F: B0 02                        bcs     $+4
   322 00:0171: 09 0C                        ora     #%00001100              ; No, make CA2 (A15) low
   323 00:0173: 66 xx                        ror     TEMP                    ; Bit 1 set
   324 00:0175: B0 02                        bcs     $+4
   325 00:0177: 09 C0                        ora     #%11000000              ; No, make CB2 (FAMS) low
   326 00:0179: 8D EC 7F                     sta     VIA2_PCR                ; Set ROM select lines
   327                        
  Thu Nov 19 2015 15:52                                                                                                    Page 10


   328 00:017C: 4C xx xx                     jmp     NewCommand              ; Done
   329                        NotROMBank:
   330                        
   331                                        if      0
   332                        ;==============================================================================
   333                        ; U - Unlock Memory
   334                        ;------------------------------------------------------------------------------
   335                        
   336                                        cmp     #'U'                    ; Unlock memory?
   337                                        bne     NotUnlock
   338                        
   339                                        short_a
   340                                        lda     #$aa                    ; Execute the unlock sequence
   341                                        sta     $8000+$5555
   342                                        lda     #$55
   343                                        sta     $8000+$2aaa
   344                                        lda     #$a0
   345                                        sta     $8000+$5555
   346                                        lda     #$ce
   347                                        sta     $a000
   348                        
   349                                        long_i
   350                                        ldx     #UNLOCKED               ; And announce it
   351                                        jsr     UartStr
   352                                        longi   off
   353                                        jmp     NewCommand              ; Done
   354                        NotUnlock:
   355                                        endif
   356                        
   357                        ;==============================================================================
   358                        ; X - XMODEM Upload
   359                        ;------------------------------------------------------------------------------
   360                        
   361 00:017F: C9 58                        cmp     #'X'                    ; XModem upload?
   362 00:0181: F0 03                        beq     $+5                     ; Yes.
   363 00:0183: 4C xx xx                     jmp     NotXModem
   364                        
   365 00:0186: A2 xx                        ldx     #ADDR_S                 ; Parse start address
   366 00:0188: 20 xx xx                     jsr     GetAddr
   367 00:018B: 90 03                        bcc     $+5
   368 00:018D: 4C xx xx                     jmp     ShowError
   369                        
   370 00:0190: 24 xx                        bit     ADDR_S+1                ; Load into ROM area?
   371 00:0192: 10 03                        bpl     NotROMArea
   372 00:0194: 20 xx xx                     jsr     CheckSafe               ; Yes, check selection
   373                        
   374                        NotROMArea:
   375                                        long_i                          ; Display waiting message
+  375 00:0197: C2 10                        rep     #(1<<X_FLAG)
+  375                                        longi   on
   376 00:0199: A2 xx xx                     ldx     #WAITING
   377 00:019C: 20 xx xx                     jsr     UartStr
   378 00:019F: 20 xx xx                     jsr     UartCRLF
   379                                        short_i
+  379 00:01A2: E2 10                        sep     #(1<<X_FLAG)
+  379                                        longi   off
   380 00:01A4: 64 xx                        stz     BLOCK                   ; Reset the block number
   381 00:01A6: E6 xx                        inc     BLOCK
  Thu Nov 19 2015 15:52                                                                                                    Page 11


   382                        
   383                        ResetRetries:
   384 00:01A8: A9 0A                        lda     #10                     ; Reset the retry counter
   385 00:01AA: 85 xx                        sta     RETRIES
   386                        
   387                        TransferWait:
   388 00:01AC: 64 xx                        stz     TEMP+0                  ; Clear timeout counter
   389 00:01AE: 64 xx                        stz     TEMP+1
   390 00:01B0: A9 EC                        lda     #-20
   391 00:01B2: 85 xx                        sta     TEMP+2
   392                        TransferPoll:
   393 00:01B4: 20 xx xx                     jsr     UartRxTest              ; Any data yet?
   394 00:01B7: B0 20                        bcs     TransferScan
   395 00:01B9: E6 xx                        inc     TEMP+0
   396 00:01BB: D0 F7                        bne     TransferPoll
   397 00:01BD: E6 xx                        inc     TEMP+1
   398 00:01BF: D0 F3                        bne     TransferPoll
   399 00:01C1: E6 xx                        inc     TEMP+2
   400 00:01C3: D0 EF                        bne     TransferPoll
   401 00:01C5: C6 xx                        dec     RETRIES
   402 00:01C7: F0 05                        beq     TimedOut
   403 00:01C9: 20 xx xx                     jsr     SendNAK                 ; Send a NAK
   404 00:01CC: 80 DE                        bra     TransferWait
   405                        
   406                        TimedOut:
   407                                        long_i
+  407 00:01CE: C2 10                        rep     #(1<<X_FLAG)
+  407                                        longi   on
   408 00:01D0: A2 xx xx                     ldx     #TIMEOUT
   409 00:01D3: 20 xx xx                     jsr     UartStr
   410                                        longi   off
   411 00:01D6: 4C xx xx                     jmp     NewCommand
   412                        
   413                        
   414                        TransferScan:
   415 00:01D9: 20 xx xx                     jsr     UartRx                  ; Wait for SOH or EOT
   416 00:01DC: C9 04                        cmp     #EOT
   417 00:01DE: F0 63                        beq     TransferDone
   418 00:01E0: C9 01                        cmp     #SOH
   419 00:01E2: D0 C8                        bne     TransferWait
   420 00:01E4: 20 xx xx                     jsr     UartRx                  ; Check the block number
   421 00:01E7: C5 xx                        cmp     BLOCK
   422 00:01E9: D0 52                        bne     TransferError
   423 00:01EB: 20 xx xx                     jsr     UartRx                  ; Check inverted block
   424 00:01EE: 49 FF                        eor     #$ff
   425 00:01F0: C5 xx                        cmp     BLOCK
   426 00:01F2: D0 49                        bne     TransferError
   427                        
   428 00:01F4: A0 00                        ldy     #0
   429 00:01F6: 84 xx                        sty     SUM                     ; Clear the check sum
   430                        TransferBlock:
   431 00:01F8: 20 xx xx                     jsr     UartRx
   432 00:01FB: 48                           pha
   433                        
   434 00:01FC: A5 xx                        lda     ADDR_S+2                ; Writing to ROM?
   435 00:01FE: D0 13                        bne     WriteByte               ; No
   436 00:0200: 24 xx                        bit     ADDR_S+1
   437 00:0202: 10 0F                        bpl     WriteByte               ; No
  Thu Nov 19 2015 15:52                                                                                                    Page 12


   438                        
   439 00:0204: A9 AA                        lda     #$aa                    ; Yes, unlock flash
   440 00:0206: 8D 55 D5                     sta     $8000+$5555
   441 00:0209: A9 55                        lda     #$55
   442 00:020B: 8D AA AA                     sta     $8000+$2aaa
   443 00:020E: A9 A0                        lda     #$a0                    ; Start byte write
   444 00:0210: 8D 55 D5                     sta     $8000+$5555
   445                        
   446                        WriteByte:
   447 00:0213: 68                           pla
   448 00:0214: 97 xx                        sta     [ADDR_S],Y
   449                        
   450                        WriteWait:
   451 00:0216: D7 xx                        cmp     [ADDR_S],Y              ; Wait for write
   452 00:0218: D0 FC                        bne     WriteWait
   453                        
   454 00:021A: 18                           clc                             ; Add to check sum
   455 00:021B: 65 xx                        adc     SUM
   456 00:021D: 85 xx                        sta     SUM
   457 00:021F: C8                           iny
   458 00:0220: C0 80                        cpy     #128
   459 00:0222: D0 D4                        bne     TransferBlock
   460 00:0224: 20 xx xx                     jsr     UartRx                  ; Check the check sum
   461 00:0227: C5 xx                        cmp     SUM
   462 00:0229: D0 12                        bne     TransferError           ; Failed
   463 00:022B: 18                           clc
   464 00:022C: 98                           tya
   465 00:022D: 65 xx                        adc     ADDR_S+0                ; Bump address one block
   466 00:022F: 85 xx                        sta     ADDR_S+0
   467 00:0231: 90 02                        bcc     $+4
   468 00:0233: E6 xx                        inc     ADDR_S+1
   469                        
   470 00:0235: 20 xx xx                     jsr     SendACK                 ; Acknowledge block
   471 00:0238: E6 xx                        inc     BLOCK                   ; Bump block number
   472 00:023A: 4C xx xx                     jmp     TransferWait
   473                        
   474                        TransferError;
   475 00:023D: 20 xx xx                     jsr     SendNAK                 ; Send a NAK
   476 00:0240: 4C xx xx                     jmp     TransferWait            ; And try again
   477                        
   478                        TransferDone:
   479 00:0243: 20 xx xx                     jsr     SendACK                 ; Acknowledge transmission
   480 00:0246: 4C xx xx                     jmp     NewCommand              ; Done
   481                        
   482                        SendACK:
   483 00:0249: A9 06                        lda     #ACK
   484 00:024B: 4C xx xx                     jmp     UartTx
   485                        
   486                        SendNAK:
   487 00:024E: A9 15                        lda     #NAK
   488 00:0250: 4C xx xx                     jmp     UartTx
   489                        
   490                        NotXModem:
   491                        
   492                        ;==============================================================================
   493                        ; ? - Help
   494                        ;------------------------------------------------------------------------------
   495                        
  Thu Nov 19 2015 15:52                                                                                                    Page 13


   496 00:0253: C9 3F                        cmp     #'?'                    ; Help command?
   497 00:0255: D0 0B                        bne     NotHelp
   498                        
   499                                        long_i
+  499 00:0257: C2 10                        rep     #(1<<X_FLAG)
+  499                                        longi   on
   500 00:0259: A2 xx xx                     ldx     #HELP                   ; Output help string
   501 00:025C: 20 xx xx                     jsr     UartStr
   502                                        longi   off
   503 00:025F: 4C xx xx                     jmp     NewCommand
   504                        NotHelp:
   505                        
   506                        ;------------------------------------------------------------------------------
   507                        
   508                        ShowError:
   509                                        long_i
+  509 00:0262: C2 10                        rep     #(1<<X_FLAG)
+  509                                        longi   on
   510 00:0264: A2 xx xx                     ldx     #ERROR                  ; Output error message
   511 00:0267: 20 xx xx                     jsr     UartStr
   512                                        longi   off
   513 00:026A: 4C xx xx                     jmp     NewCommand
   514                        
   515                        ;==============================================================================
   516                        ;------------------------------------------------------------------------------
   517                        
   518                        ; Checks if an expendible ROM bank is currently selected. If the bank with the
   519                        ; WDC firmware is selected then warn and accept a new command.
   520                        
   521                        CheckSafe:
   522 00:026D: AD EC 7F                     lda     VIA2_PCR                ; WDC ROM selected?
   523 00:0270: 29 CC                        and     #%11001100
   524 00:0272: F0 01                        beq     $+3
   525 00:0274: 60                           rts                             ; No, save to change
   526                        
   527 00:0275: 68                           pla                             ; Discard return address
   528 00:0276: 68                           pla
   529                                        long_i                          ; Complain about bank
+  529 00:0277: C2 10                        rep     #(1<<X_FLAG)
+  529                                        longi   on
   530 00:0279: A2 xx xx                     ldx     #NOT_SAFE
   531 00:027C: 20 xx xx                     jsr     UartStr
   532                                        longi   off
   533 00:027F: 4C xx xx                     jmp     NewCommand              ; And start over
   534                        
   535                        ;==============================================================================
   536                        ;------------------------------------------------------------------------------
   537                        
   538                        GetByte:
   539 00:0282: 9E 00 00                     stz     0,x                     ; Set the target address
   540 00:0285: 20 xx xx                     jsr     SkipSpaces              ; Skip to first real characater
   541 00:0288: 90 01                        bcc     $+3
   542 00:028A: 60                           rts                             ; None found
   543 00:028B: 20 xx xx                     jsr     IsHexDigit              ; Must have atleast one digit
   544 00:028E: 90 12                        bcc     ByteFail
   545 00:0290: 20 xx xx                     jsr     AddDigit
   546 00:0293: 20 xx xx                     jsr     NextChar
   547 00:0296: B0 08                        bcs     ByteDone
  Thu Nov 19 2015 15:52                                                                                                    Page 14


   548 00:0298: 20 xx xx                     jsr     IsHexDigit
   549 00:029B: 90 03                        bcc     ByteDone
   550 00:029D: 20 xx xx                     jsr     AddDigit
   551 00:02A0: 18           ByteDone:       clc
   552 00:02A1: 60                           rts
   553 00:02A2: 38           ByteFail:       sec
   554 00:02A3: 60                           rts
   555                        
   556                        GetAddr:
   557 00:02A4: 9E 00 00                     stz     0,x                     ; Set the target address
   558 00:02A7: 9E 01 00                     stz     1,x
   559 00:02AA: A5 xx                        lda     BANK
   560 00:02AC: 9D 02 00                     sta     2,x
   561 00:02AF: 20 xx xx                     jsr     SkipSpaces              ; Skip to first real characater
   562 00:02B2: 90 01                        bcc     $+3
   563 00:02B4: 60                           rts                             ; None found
   564                        
   565 00:02B5: 20 xx xx                     jsr     IsHexDigit              ; Must have atleast one digit
   566 00:02B8: 90 2C                        bcc     AddrFail
   567 00:02BA: 20 xx xx                     jsr     AddDigit
   568 00:02BD: 20 xx xx                     jsr     NextChar
   569 00:02C0: B0 22                        bcs     AddrDone
   570 00:02C2: 20 xx xx                     jsr     IsHexDigit
   571 00:02C5: 90 1D                        bcc     AddrDone
   572 00:02C7: 20 xx xx                     jsr     AddDigit
   573 00:02CA: 20 xx xx                     jsr     NextChar
   574 00:02CD: B0 15                        bcs     AddrDone
   575 00:02CF: 20 xx xx                     jsr     IsHexDigit
   576 00:02D2: 90 10                        bcc     AddrDone
   577 00:02D4: 20 xx xx                     jsr     AddDigit
   578 00:02D7: 20 xx xx                     jsr     NextChar
   579 00:02DA: B0 08                        bcs     AddrDone
   580 00:02DC: 20 xx xx                     jsr     IsHexDigit
   581 00:02DF: 90 03                        bcc     AddrDone
   582 00:02E1: 20 xx xx                     jsr     AddDigit
   583 00:02E4: 18           AddrDone:       clc                             ; Carry clear got an address
   584 00:02E5: 60                           rts
   585 00:02E6: 38           AddrFail:       sec                             ; Carry set -- failed.
   586 00:02E7: 60                           rts
   587                        
   588                        AddDigit:
   589 00:02E8: 38                           sec                             ; Convert ASCII to binary
   590 00:02E9: E9 30                        sbc     #'0'
   591 00:02EB: C9 0A                        cmp     #$0a
   592 00:02ED: 90 02                        bcc     $+4
   593 00:02EF: E9 07                        sbc     #7
   594                        
   595 00:02F1: 1E 00 00                     asl     0,x                     ; Shift up one nybble
   596 00:02F4: 3E 01 00                     rol     1,x
   597 00:02F7: 1E 00 00                     asl     0,x
   598 00:02FA: 3E 01 00                     rol     1,x
   599 00:02FD: 1E 00 00                     asl     0,x
   600 00:0300: 3E 01 00                     rol     1,x
   601 00:0303: 1E 00 00                     asl     0,x
   602 00:0306: 3E 01 00                     rol     1,x
   603                        
   604 00:0309: 1D 00 00                     ora     0,x                     ; Merge in new digit
   605 00:030C: 9D 00 00                     sta     0,x                     ; Then get next digit
  Thu Nov 19 2015 15:52                                                                                                    Page 15


   606 00:030F: 60                           rts
   607                        
   608                        ; Get the next character from the command buffer updating the position in X.
   609                        ; Set the carry if the end of the buffer is reached.
   610                        
   611                        NextChar:
   612 00:0310: C4 xx                        cpy     BUFLEN                  ; Any characters left?
   613 00:0312: 90 01                        bcc     $+3
   614 00:0314: 60                           rts
   615 00:0315: B9 00 02                     lda     BUFFER,y
   616 00:0318: C8                           iny
   617 00:0319: 4C xx xx                     jmp     ToUpperCase
   618                        
   619                        SkipSpaces:
   620 00:031C: 20 xx xx                     jsr     NextChar                ; Fetch next character
   621 00:031F: 90 01                        bcc     $+3                     ; Any left?
   622 00:0321: 60                           rts                             ; No
   623 00:0322: C9 20                        cmp     #' '                    ; Is it a space?
   624 00:0324: F0 F6                        beq     SkipSpaces              ; Yes, try again
   625 00:0326: 18                           clc
   626 00:0327: 60                           rts                             ; Done
   627                        
   628                        ; If the character in A is lower case then convert it to upper case.
   629                        
   630                        ToUpperCase:
   631 00:0328: 20 xx xx                     jsr     IsLowerCase             ; Test the character
   632 00:032B: 90 02                        bcc     $+4
   633 00:032D: E9 20                        sbc     #32                     ; Convert lower case
   634 00:032F: 18                           clc
   635 00:0330: 60                           rts                             ; Done
   636                        
   637                        ; Determine if the character in A is a lower case letter. Set the carry if it
   638                        ; is, otherwise clear it.
   639                        
   640                        IsLowerCase:
   641 00:0331: C9 61                        cmp     #'a'                    ; Between a and z?
   642 00:0333: 90 06                        bcc     ClearCarry
   643 00:0335: C9 7B                        cmp     #'z'+1
   644 00:0337: B0 02                        bcs     ClearCarry
   645 00:0339: 38           SetCarry:       sec
   646 00:033A: 60                           rts
   647 00:033B: 18           ClearCarry:     clc
   648 00:033C: 60                           rts
   649                        
   650                        ; Determine if the character in A is a hex character. Set the carry if it is,
   651                        ; otherwise clear it.
   652                        
   653                        IsHexDigit:
   654 00:033D: C9 30                        cmp     #'0'                    ; Between 0 and 9?
   655 00:033F: 90 FA                        bcc     ClearCarry
   656 00:0341: C9 3A                        cmp     #'9'+1
   657 00:0343: 90 F4                        bcc     SetCarry
   658 00:0345: C9 41                        cmp     #'A'                    ; Between A and F?
   659 00:0347: 90 F2                        bcc     ClearCarry
   660 00:0349: C9 47                        cmp     #'F'+1
   661 00:034B: 90 EC                        bcc     SetCarry
   662 00:034D: 80 EC                        bra     ClearCarry
   663                        
  Thu Nov 19 2015 15:52                                                                                                    Page 16


   664                        ; Determine if the character in A is a printable character. Set the carry if it
   665                        ; is, otherwise clear it.
   666                        
   667                        IsPrintable:
   668 00:034F: C9 20                        cmp     #' '
   669 00:0351: 90 E8                        bcc     ClearCarry
   670 00:0353: C9 7F                        cmp     #DEL
   671 00:0355: 90 E2                        bcc     SetCarry
   672 00:0357: 80 E2                        bra     ClearCarry
   673                        
   674                        ;==============================================================================
   675                        ; Display Utilities
   676                        ;------------------------------------------------------------------------------
   677                        
   678                        ; Display the value in A as two hexadecimal digits.
   679                        
   680                        UartHex2:
   681 00:0359: 48                           pha                             ; Save the original byte
   682 00:035A: 4A                           lsr     a                       ; Shift down hi nybble
   683 00:035B: 4A                           lsr     a
   684 00:035C: 4A                           lsr     a
   685 00:035D: 4A                           lsr     a
   686 00:035E: 20 xx xx                     jsr     UartHex                 ; Display
   687 00:0361: 68                           pla                             ; Recover data byte
   688                        
   689                        ; Display the LSB of the value in A as a hexadecimal digit using decimal
   690                        ; arithmetic to do the conversion.
   691                        
   692                        UartHex:
   693 00:0362: 29 0F                        and     #$0f                    ; Strip out lo nybble
   694 00:0364: F8                           sed                             ; Convert to ASCII
   695 00:0365: 18                           clc
   696 00:0366: 69 90                        adc     #$90
   697 00:0368: 69 40                        adc     #$40
   698 00:036A: D8                           cld
   699 00:036B: 4C xx xx                     jmp     UartTx                  ; And display
   700                        
   701                        ; Display the string of characters starting a the memory location pointed to by
   702                        ; X (16-bits).
   703                        
   704                        UartStr:
   705 00:036E: BD 00 00                     lda     0,x                     ; Fetch the next character
   706 00:0371: D0 01                        bne     $+3                     ; Return it end of string
   707 00:0373: 60                           rts
   708 00:0374: 20 xx xx                     jsr     UartTx                  ; Otherwise print it
   709 00:0377: E8                           inx                             ; Bump the pointer
   710 00:0378: 80 F4                        bra     UartStr                 ; And repeat
   711                        
   712                        ; Display a CR/LF control character sequence.
   713                        
   714                        UartCRLF:
   715 00:037A: 20 xx xx                     jsr     UartCR                  ; Transmit a CR
   716 00:037D: A9 0A                        lda     #LF                     ; Followed by a LF
   717 00:037F: 4C xx xx                     jmp     UartTx
   718                        
   719 00:0382: A9 0D        UartCR:         lda     #CR                     ; Transmit a CR
   720 00:0384: 4C xx xx                     jmp     UartTx
   721                        
  Thu Nov 19 2015 15:52                                                                                                    Page 17


   722                        ;==============================================================================
   723                        ; String Literals
   724                        ;------------------------------------------------------------------------------
   725                        
   726 00:0387: 0D 0A 57 36  TITLE           db      CR,LF,"W65C816SXB-Hacker [15.11]",0
       00:038B: 35 43 38 31 
       00:038F: 36 53 58 42 
       00:0393: 2D 48 61 63 
       00:0397: 6B 65 72 20 
       00:039B: 5B 31 35 2E 
       00:039F: 31 31 5D 00 
   727                        
   728 00:03A3: 0D 0A 45 72  ERROR           db      CR,LF,"Error - Type ? for help",0
       00:03A7: 72 6F 72 20 
       00:03AB: 2D 20 54 79 
       00:03AF: 70 65 20 3F 
       00:03B3: 20 66 6F 72 
       00:03B7: 20 68 65 6C 
       00:03BB: 70 00 
   729                        
   730 00:03BD: 0D 0A 45 72  ERASE_FAILED    db      CR,LF,"Erase failed",0
       00:03C1: 61 73 65 20 
       00:03C5: 66 61 69 6C 
       00:03C9: 65 64 00 
   731 00:03CC: 0D 0A 57 72  WRITE_FAILED    db      CR,LF,"Write failed",0
       00:03D0: 69 74 65 20 
       00:03D4: 66 61 69 6C 
       00:03D8: 65 64 00 
   732 00:03DB: 0D 0A 57 44  NOT_SAFE        db      CR,LF,"WDC ROM Bank Selected",0
       00:03DF: 43 20 52 4F 
       00:03E3: 4D 20 42 61 
       00:03E7: 6E 6B 20 53 
       00:03EB: 65 6C 65 63 
       00:03EF: 74 65 64 00 
   733                        
   734 00:03F3: 0D 0A 57 61  WAITING         db      CR,LF,"Waiting for XMODEM transfer to start",0
       00:03F7: 69 74 69 6E 
       00:03FB: 67 20 66 6F 
       00:03FF: 72 20 58 4D 
       00:0403: 4F 44 45 4D 
       00:0407: 20 74 72 61 
       00:040B: 6E 73 66 65 
       00:040F: 72 20 74 6F 
       00:0413: 20 73 74 61 
       00:0417: 72 74 00 
   735 00:041A: 0D 0A 54 69  TIMEOUT         db      CR,LF,"Timeout",0
       00:041E: 6D 65 6F 75 
       00:0422: 74 00 
   736                        
   737 00:0424: 0D 0A 42 20  HELP            db      CR,LF,"B bb           - Set memory bank"
       00:0428: 62 62 20 20 
       00:042C: 20 20 20 20 
       00:0430: 20 20 20 20 
       00:0434: 20 2D 20 53 
       00:0438: 65 74 20 6D 
       00:043C: 65 6D 6F 72 
       00:0440: 79 20 62 61 
       00:0444: 6E 6B 
  Thu Nov 19 2015 15:52                                                                                                    Page 18


   738 00:0446: 0D 0A 45 20                  db      CR,LF,"E              - Erase ROM area"
       00:044A: 20 20 20 20 
       00:044E: 20 20 20 20 
       00:0452: 20 20 20 20 
       00:0456: 20 2D 20 45 
       00:045A: 72 61 73 65 
       00:045E: 20 52 4F 4D 
       00:0462: 20 61 72 65 
       00:0466: 61 
   739 00:0467: 0D 0A 47 20                  db      CR,LF,"G [xxxx]       - Run from bb:xxxx or invoke reset vector"
       00:046B: 5B 78 78 78 
       00:046F: 78 5D 20 20 
       00:0473: 20 20 20 20 
       00:0477: 20 2D 20 52 
       00:047B: 75 6E 20 66 
       00:047F: 72 6F 6D 20 
       00:0483: 62 62 3A 78 
       00:0487: 78 78 78 20 
       00:048B: 6F 72 20 69 
       00:048F: 6E 76 6F 6B 
       00:0493: 65 20 72 65 
       00:0497: 73 65 74 20 
       00:049B: 76 65 63 74 
       00:049F: 6F 72 
   740 00:04A1: 0D 0A 4D 20                  db      CR,LF,"M ssss eeee    - Display memory in current bank"
       00:04A5: 73 73 73 73 
       00:04A9: 20 65 65 65 
       00:04AD: 65 20 20 20 
       00:04B1: 20 2D 20 44 
       00:04B5: 69 73 70 6C 
       00:04B9: 61 79 20 6D 
       00:04BD: 65 6D 6F 72 
       00:04C1: 79 20 69 6E 
       00:04C5: 20 63 75 72 
       00:04C9: 72 65 6E 74 
       00:04CD: 20 62 61 6E 
       00:04D1: 6B 
   741 00:04D2: 0D 0A 52 20                  db      CR,LF,"R 0-3          - Select ROM bank 0-3"
       00:04D6: 30 2D 33 20 
       00:04DA: 20 20 20 20 
       00:04DE: 20 20 20 20 
       00:04E2: 20 2D 20 53 
       00:04E6: 65 6C 65 63 
       00:04EA: 74 20 52 4F 
       00:04EE: 4D 20 62 61 
       00:04F2: 6E 6B 20 30 
       00:04F6: 2D 33 
   742 00:04F8: 0D 0A 58 20                  db      CR,LF,"X xxxx         - XMODEM upload to bb:xxxx"
       00:04FC: 78 78 78 78 
       00:0500: 20 20 20 20 
       00:0504: 20 20 20 20 
       00:0508: 20 2D 20 58 
       00:050C: 4D 4F 44 45 
       00:0510: 4D 20 75 70 
       00:0514: 6C 6F 61 64 
       00:0518: 20 74 6F 20 
       00:051C: 62 62 3A 78 
       00:0520: 78 78 78 
  Thu Nov 19 2015 15:52                                                                                                    Page 19


   743 00:0523: 00                           db      0
   744                        
   745                                        end


      Lines assembled: 946
      Errors: 0
